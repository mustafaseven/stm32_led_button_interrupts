
led_button_interrupts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fe8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003170  08003170  00013170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003180  08003180  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003180  08003180  00013180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003188  08003188  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003188  08003188  00013188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800318c  0800318c  0001318c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  2000000c  0800319c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  0800319c  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cdf8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002023  00000000  00000000  0002ce34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  0002ee58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b0  00000000  00000000  0002f6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020d47  00000000  00000000  0002fea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a82e  00000000  00000000  00050be7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c84a5  00000000  00000000  0005b415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001238ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002218  00000000  00000000  00123910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003158 	.word	0x08003158

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003158 	.word	0x08003158

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fa24 	bl	8000910 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f806 	bl	80004d8 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

  led_driver_init();
 80004cc:	f000 f9c6 	bl	800085c <led_driver_init>
  buttonDriverInt_Init();
 80004d0:	f000 f946 	bl	8000760 <buttonDriverInt_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while (1)
 80004d4:	e7fe      	b.n	80004d4 <main+0x14>
	...

080004d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b094      	sub	sp, #80	; 0x50
 80004dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004de:	f107 0320 	add.w	r3, r7, #32
 80004e2:	2230      	movs	r2, #48	; 0x30
 80004e4:	2100      	movs	r1, #0
 80004e6:	4618      	mov	r0, r3
 80004e8:	f002 fe2e 	bl	8003148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ec:	f107 030c 	add.w	r3, r7, #12
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
 80004fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fc:	2300      	movs	r3, #0
 80004fe:	60bb      	str	r3, [r7, #8]
 8000500:	4b22      	ldr	r3, [pc, #136]	; (800058c <SystemClock_Config+0xb4>)
 8000502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000504:	4a21      	ldr	r2, [pc, #132]	; (800058c <SystemClock_Config+0xb4>)
 8000506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800050a:	6413      	str	r3, [r2, #64]	; 0x40
 800050c:	4b1f      	ldr	r3, [pc, #124]	; (800058c <SystemClock_Config+0xb4>)
 800050e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000514:	60bb      	str	r3, [r7, #8]
 8000516:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000518:	2300      	movs	r3, #0
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <SystemClock_Config+0xb8>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a1b      	ldr	r2, [pc, #108]	; (8000590 <SystemClock_Config+0xb8>)
 8000522:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000526:	6013      	str	r3, [r2, #0]
 8000528:	4b19      	ldr	r3, [pc, #100]	; (8000590 <SystemClock_Config+0xb8>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000534:	2302      	movs	r3, #2
 8000536:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000538:	2301      	movs	r3, #1
 800053a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053c:	2310      	movs	r3, #16
 800053e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000540:	2300      	movs	r3, #0
 8000542:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000544:	f107 0320 	add.w	r3, r7, #32
 8000548:	4618      	mov	r0, r3
 800054a:	f001 fdbd 	bl	80020c8 <HAL_RCC_OscConfig>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000554:	f000 f81e 	bl	8000594 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000558:	230f      	movs	r3, #15
 800055a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800055c:	2300      	movs	r3, #0
 800055e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000560:	2300      	movs	r3, #0
 8000562:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000568:	2300      	movs	r3, #0
 800056a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f002 f820 	bl	80025b8 <HAL_RCC_ClockConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800057e:	f000 f809 	bl	8000594 <Error_Handler>
  }
}
 8000582:	bf00      	nop
 8000584:	3750      	adds	r7, #80	; 0x50
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40023800 	.word	0x40023800
 8000590:	40007000 	.word	0x40007000

08000594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000598:	b672      	cpsid	i
}
 800059a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800059c:	e7fe      	b.n	800059c <Error_Handler+0x8>
	...

080005a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	4b10      	ldr	r3, [pc, #64]	; (80005ec <HAL_MspInit+0x4c>)
 80005ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ae:	4a0f      	ldr	r2, [pc, #60]	; (80005ec <HAL_MspInit+0x4c>)
 80005b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b4:	6453      	str	r3, [r2, #68]	; 0x44
 80005b6:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <HAL_MspInit+0x4c>)
 80005b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	603b      	str	r3, [r7, #0]
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_MspInit+0x4c>)
 80005c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ca:	4a08      	ldr	r2, [pc, #32]	; (80005ec <HAL_MspInit+0x4c>)
 80005cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d0:	6413      	str	r3, [r2, #64]	; 0x40
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <HAL_MspInit+0x4c>)
 80005d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005de:	2007      	movs	r0, #7
 80005e0:	f000 faba 	bl	8000b58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40023800 	.word	0x40023800

080005f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <NMI_Handler+0x4>

080005f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005fa:	e7fe      	b.n	80005fa <HardFault_Handler+0x4>

080005fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <MemManage_Handler+0x4>

08000602 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000606:	e7fe      	b.n	8000606 <BusFault_Handler+0x4>

08000608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800060c:	e7fe      	b.n	800060c <UsageFault_Handler+0x4>

0800060e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr

0800061c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800063c:	f000 f9ba 	bl	80009b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}

08000644 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000648:	4802      	ldr	r0, [pc, #8]	; (8000654 <OTG_FS_IRQHandler+0x10>)
 800064a:	f000 fab8 	bl	8000bbe <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	2000002c 	.word	0x2000002c

08000658 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <SystemInit+0x20>)
 800065e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000662:	4a05      	ldr	r2, [pc, #20]	; (8000678 <SystemInit+0x20>)
 8000664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800067c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000680:	480d      	ldr	r0, [pc, #52]	; (80006b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000682:	490e      	ldr	r1, [pc, #56]	; (80006bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000684:	4a0e      	ldr	r2, [pc, #56]	; (80006c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000688:	e002      	b.n	8000690 <LoopCopyDataInit>

0800068a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800068a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800068c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800068e:	3304      	adds	r3, #4

08000690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000694:	d3f9      	bcc.n	800068a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000696:	4a0b      	ldr	r2, [pc, #44]	; (80006c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000698:	4c0b      	ldr	r4, [pc, #44]	; (80006c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800069a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800069c:	e001      	b.n	80006a2 <LoopFillZerobss>

0800069e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800069e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a0:	3204      	adds	r2, #4

080006a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a4:	d3fb      	bcc.n	800069e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80006a6:	f7ff ffd7 	bl	8000658 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006aa:	f002 fd29 	bl	8003100 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006ae:	f7ff ff07 	bl	80004c0 <main>
  bx  lr    
 80006b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80006b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006c0:	08003190 	.word	0x08003190
  ldr r2, =_sbss
 80006c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006c8:	20000330 	.word	0x20000330

080006cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006cc:	e7fe      	b.n	80006cc <ADC_IRQHandler>
	...

080006d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	db0b      	blt.n	80006fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	f003 021f 	and.w	r2, r3, #31
 80006e8:	4907      	ldr	r1, [pc, #28]	; (8000708 <__NVIC_EnableIRQ+0x38>)
 80006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ee:	095b      	lsrs	r3, r3, #5
 80006f0:	2001      	movs	r0, #1
 80006f2:	fa00 f202 	lsl.w	r2, r0, r2
 80006f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	e000e100 	.word	0xe000e100

0800070c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	6039      	str	r1, [r7, #0]
 8000716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071c:	2b00      	cmp	r3, #0
 800071e:	db0a      	blt.n	8000736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	b2da      	uxtb	r2, r3
 8000724:	490c      	ldr	r1, [pc, #48]	; (8000758 <__NVIC_SetPriority+0x4c>)
 8000726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072a:	0112      	lsls	r2, r2, #4
 800072c:	b2d2      	uxtb	r2, r2
 800072e:	440b      	add	r3, r1
 8000730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000734:	e00a      	b.n	800074c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4908      	ldr	r1, [pc, #32]	; (800075c <__NVIC_SetPriority+0x50>)
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	f003 030f 	and.w	r3, r3, #15
 8000742:	3b04      	subs	r3, #4
 8000744:	0112      	lsls	r2, r2, #4
 8000746:	b2d2      	uxtb	r2, r2
 8000748:	440b      	add	r3, r1
 800074a:	761a      	strb	r2, [r3, #24]
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	e000e100 	.word	0xe000e100
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <buttonDriverInt_Init>:

#include "stm32f4xx_hal.h"

void buttonDriverInt_Init()
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	4b23      	ldr	r3, [pc, #140]	; (80007f8 <buttonDriverInt_Init+0x98>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a22      	ldr	r2, [pc, #136]	; (80007f8 <buttonDriverInt_Init+0x98>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b20      	ldr	r3, [pc, #128]	; (80007f8 <buttonDriverInt_Init+0x98>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <buttonDriverInt_Init+0x98>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078a:	4a1b      	ldr	r2, [pc, #108]	; (80007f8 <buttonDriverInt_Init+0x98>)
 800078c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000790:	6453      	str	r3, [r2, #68]	; 0x44
 8000792:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <buttonDriverInt_Init+0x98>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]

	GPIOA->MODER &= ~(1<<1);
 800079e:	4b17      	ldr	r3, [pc, #92]	; (80007fc <buttonDriverInt_Init+0x9c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a16      	ldr	r2, [pc, #88]	; (80007fc <buttonDriverInt_Init+0x9c>)
 80007a4:	f023 0302 	bic.w	r3, r3, #2
 80007a8:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(0x00000001);
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <buttonDriverInt_Init+0x9c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a13      	ldr	r2, [pc, #76]	; (80007fc <buttonDriverInt_Init+0x9c>)
 80007b0:	f023 0301 	bic.w	r3, r3, #1
 80007b4:	6013      	str	r3, [r2, #0]
	//GPIOA ->MODER &= ~((3UL << 0));

	SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PA;
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <buttonDriverInt_Init+0xa0>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
	//EXTI
	EXTI-> IMR |= EXTI_IMR_IM0;
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <buttonDriverInt_Init+0xa4>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a10      	ldr	r2, [pc, #64]	; (8000804 <buttonDriverInt_Init+0xa4>)
 80007c2:	f043 0301 	orr.w	r3, r3, #1
 80007c6:	6013      	str	r3, [r2, #0]
	EXTI-> RTSR |= EXTI_RTSR_TR0;
 80007c8:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <buttonDriverInt_Init+0xa4>)
 80007ca:	689b      	ldr	r3, [r3, #8]
 80007cc:	4a0d      	ldr	r2, [pc, #52]	; (8000804 <buttonDriverInt_Init+0xa4>)
 80007ce:	f043 0301 	orr.w	r3, r3, #1
 80007d2:	6093      	str	r3, [r2, #8]
	EXTI-> FTSR |= EXTI_FTSR_TR0;
 80007d4:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <buttonDriverInt_Init+0xa4>)
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <buttonDriverInt_Init+0xa4>)
 80007da:	f043 0301 	orr.w	r3, r3, #1
 80007de:	60d3      	str	r3, [r2, #12]

	//NVIC
	NVIC_SetPriority(EXTI0_IRQn, 1);
 80007e0:	2101      	movs	r1, #1
 80007e2:	2006      	movs	r0, #6
 80007e4:	f7ff ff92 	bl	800070c <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_IRQn);
 80007e8:	2006      	movs	r0, #6
 80007ea:	f7ff ff71 	bl	80006d0 <__NVIC_EnableIRQ>

}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40020000 	.word	0x40020000
 8000800:	40013800 	.word	0x40013800
 8000804:	40013c00 	.word	0x40013c00

08000808 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0

	GPIOD->ODR ^= GPIO_PIN_12;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <EXTI0_IRQHandler+0x4c>)
 800080e:	695b      	ldr	r3, [r3, #20]
 8000810:	4a10      	ldr	r2, [pc, #64]	; (8000854 <EXTI0_IRQHandler+0x4c>)
 8000812:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000816:	6153      	str	r3, [r2, #20]
	GPIOD->ODR ^= GPIO_PIN_13;
 8000818:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <EXTI0_IRQHandler+0x4c>)
 800081a:	695b      	ldr	r3, [r3, #20]
 800081c:	4a0d      	ldr	r2, [pc, #52]	; (8000854 <EXTI0_IRQHandler+0x4c>)
 800081e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000822:	6153      	str	r3, [r2, #20]
	GPIOD->ODR ^= GPIO_PIN_14;
 8000824:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <EXTI0_IRQHandler+0x4c>)
 8000826:	695b      	ldr	r3, [r3, #20]
 8000828:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <EXTI0_IRQHandler+0x4c>)
 800082a:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 800082e:	6153      	str	r3, [r2, #20]
	GPIOD->ODR ^= GPIO_PIN_15;
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <EXTI0_IRQHandler+0x4c>)
 8000832:	695b      	ldr	r3, [r3, #20]
 8000834:	4a07      	ldr	r2, [pc, #28]	; (8000854 <EXTI0_IRQHandler+0x4c>)
 8000836:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 800083a:	6153      	str	r3, [r2, #20]
	EXTI->PR |= EXTI_PR_PR0;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <EXTI0_IRQHandler+0x50>)
 800083e:	695b      	ldr	r3, [r3, #20]
 8000840:	4a05      	ldr	r2, [pc, #20]	; (8000858 <EXTI0_IRQHandler+0x50>)
 8000842:	f043 0301 	orr.w	r3, r3, #1
 8000846:	6153      	str	r3, [r2, #20]

}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40020c00 	.word	0x40020c00
 8000858:	40013c00 	.word	0x40013c00

0800085c <led_driver_init>:

#include "stm32f4xx_hal.h"
void led_driver_init(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1<<3);
 8000860:	4b29      	ldr	r3, [pc, #164]	; (8000908 <led_driver_init+0xac>)
 8000862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000864:	4a28      	ldr	r2, [pc, #160]	; (8000908 <led_driver_init+0xac>)
 8000866:	f043 0308 	orr.w	r3, r3, #8
 800086a:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOD->MODER &= ~(1<<27);
 800086c:	4b27      	ldr	r3, [pc, #156]	; (800090c <led_driver_init+0xb0>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a26      	ldr	r2, [pc, #152]	; (800090c <led_driver_init+0xb0>)
 8000872:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000876:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1<<26);
 8000878:	4b24      	ldr	r3, [pc, #144]	; (800090c <led_driver_init+0xb0>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a23      	ldr	r2, [pc, #140]	; (800090c <led_driver_init+0xb0>)
 800087e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000882:	6013      	str	r3, [r2, #0]

	GPIOD->MODER &= ~(1<<25);
 8000884:	4b21      	ldr	r3, [pc, #132]	; (800090c <led_driver_init+0xb0>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a20      	ldr	r2, [pc, #128]	; (800090c <led_driver_init+0xb0>)
 800088a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800088e:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1<<24);
 8000890:	4b1e      	ldr	r3, [pc, #120]	; (800090c <led_driver_init+0xb0>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a1d      	ldr	r2, [pc, #116]	; (800090c <led_driver_init+0xb0>)
 8000896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800089a:	6013      	str	r3, [r2, #0]

	GPIOD->MODER &= ~(1<<29);
 800089c:	4b1b      	ldr	r3, [pc, #108]	; (800090c <led_driver_init+0xb0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a1a      	ldr	r2, [pc, #104]	; (800090c <led_driver_init+0xb0>)
 80008a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80008a6:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1<<28);
 80008a8:	4b18      	ldr	r3, [pc, #96]	; (800090c <led_driver_init+0xb0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a17      	ldr	r2, [pc, #92]	; (800090c <led_driver_init+0xb0>)
 80008ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b2:	6013      	str	r3, [r2, #0]

	GPIOD->MODER &= ~(1<<31);
 80008b4:	4b15      	ldr	r3, [pc, #84]	; (800090c <led_driver_init+0xb0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a14      	ldr	r2, [pc, #80]	; (800090c <led_driver_init+0xb0>)
 80008ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80008be:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1<<30);
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <led_driver_init+0xb0>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a11      	ldr	r2, [pc, #68]	; (800090c <led_driver_init+0xb0>)
 80008c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80008ca:	6013      	str	r3, [r2, #0]

	GPIOD->OTYPER &= ~(1<<12);
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <led_driver_init+0xb0>)
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	4a0e      	ldr	r2, [pc, #56]	; (800090c <led_driver_init+0xb0>)
 80008d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008d6:	6053      	str	r3, [r2, #4]
	GPIOD->OTYPER &= ~(1<<13);
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <led_driver_init+0xb0>)
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	4a0b      	ldr	r2, [pc, #44]	; (800090c <led_driver_init+0xb0>)
 80008de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80008e2:	6053      	str	r3, [r2, #4]
	GPIOD->OTYPER &= ~(1<<14);
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <led_driver_init+0xb0>)
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	4a08      	ldr	r2, [pc, #32]	; (800090c <led_driver_init+0xb0>)
 80008ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80008ee:	6053      	str	r3, [r2, #4]
	GPIOD->OTYPER &= ~(1<<15);
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <led_driver_init+0xb0>)
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	4a05      	ldr	r2, [pc, #20]	; (800090c <led_driver_init+0xb0>)
 80008f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008fa:	6053      	str	r3, [r2, #4]

}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800
 800090c:	40020c00 	.word	0x40020c00

08000910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000914:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <HAL_Init+0x40>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a0d      	ldr	r2, [pc, #52]	; (8000950 <HAL_Init+0x40>)
 800091a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800091e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000920:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <HAL_Init+0x40>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a0a      	ldr	r2, [pc, #40]	; (8000950 <HAL_Init+0x40>)
 8000926:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800092a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <HAL_Init+0x40>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a07      	ldr	r2, [pc, #28]	; (8000950 <HAL_Init+0x40>)
 8000932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000936:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000938:	2003      	movs	r0, #3
 800093a:	f000 f90d 	bl	8000b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800093e:	2000      	movs	r0, #0
 8000940:	f000 f808 	bl	8000954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000944:	f7ff fe2c 	bl	80005a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023c00 	.word	0x40023c00

08000954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <HAL_InitTick+0x54>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_InitTick+0x58>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	4619      	mov	r1, r3
 8000966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096a:	fbb3 f3f1 	udiv	r3, r3, r1
 800096e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000972:	4618      	mov	r0, r3
 8000974:	f000 f917 	bl	8000ba6 <HAL_SYSTICK_Config>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	e00e      	b.n	80009a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b0f      	cmp	r3, #15
 8000986:	d80a      	bhi.n	800099e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000988:	2200      	movs	r2, #0
 800098a:	6879      	ldr	r1, [r7, #4]
 800098c:	f04f 30ff 	mov.w	r0, #4294967295
 8000990:	f000 f8ed 	bl	8000b6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000994:	4a06      	ldr	r2, [pc, #24]	; (80009b0 <HAL_InitTick+0x5c>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800099a:	2300      	movs	r3, #0
 800099c:	e000      	b.n	80009a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000000 	.word	0x20000000
 80009ac:	20000008 	.word	0x20000008
 80009b0:	20000004 	.word	0x20000004

080009b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_IncTick+0x20>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_IncTick+0x24>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4413      	add	r3, r2
 80009c4:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <HAL_IncTick+0x24>)
 80009c6:	6013      	str	r3, [r2, #0]
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	20000008 	.word	0x20000008
 80009d8:	20000028 	.word	0x20000028

080009dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return uwTick;
 80009e0:	4b03      	ldr	r3, [pc, #12]	; (80009f0 <HAL_GetTick+0x14>)
 80009e2:	681b      	ldr	r3, [r3, #0]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	20000028 	.word	0x20000028

080009f4 <__NVIC_SetPriorityGrouping>:
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a10:	4013      	ands	r3, r2
 8000a12:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a26:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	60d3      	str	r3, [r2, #12]
}
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <__NVIC_GetPriorityGrouping>:
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a40:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <__NVIC_GetPriorityGrouping+0x18>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	0a1b      	lsrs	r3, r3, #8
 8000a46:	f003 0307 	and.w	r3, r3, #7
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_SetPriority>:
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	6039      	str	r1, [r7, #0]
 8000a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	db0a      	blt.n	8000a82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	490c      	ldr	r1, [pc, #48]	; (8000aa4 <__NVIC_SetPriority+0x4c>)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	0112      	lsls	r2, r2, #4
 8000a78:	b2d2      	uxtb	r2, r2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000a80:	e00a      	b.n	8000a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4908      	ldr	r1, [pc, #32]	; (8000aa8 <__NVIC_SetPriority+0x50>)
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	f003 030f 	and.w	r3, r3, #15
 8000a8e:	3b04      	subs	r3, #4
 8000a90:	0112      	lsls	r2, r2, #4
 8000a92:	b2d2      	uxtb	r2, r2
 8000a94:	440b      	add	r3, r1
 8000a96:	761a      	strb	r2, [r3, #24]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000e100 	.word	0xe000e100
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b089      	sub	sp, #36	; 0x24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	f1c3 0307 	rsb	r3, r3, #7
 8000ac6:	2b04      	cmp	r3, #4
 8000ac8:	bf28      	it	cs
 8000aca:	2304      	movcs	r3, #4
 8000acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	2b06      	cmp	r3, #6
 8000ad4:	d902      	bls.n	8000adc <NVIC_EncodePriority+0x30>
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3b03      	subs	r3, #3
 8000ada:	e000      	b.n	8000ade <NVIC_EncodePriority+0x32>
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43da      	mvns	r2, r3
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	401a      	ands	r2, r3
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af4:	f04f 31ff 	mov.w	r1, #4294967295
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	fa01 f303 	lsl.w	r3, r1, r3
 8000afe:	43d9      	mvns	r1, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	4313      	orrs	r3, r2
         );
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3724      	adds	r7, #36	; 0x24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
	...

08000b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b24:	d301      	bcc.n	8000b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b26:	2301      	movs	r3, #1
 8000b28:	e00f      	b.n	8000b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <SysTick_Config+0x40>)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b32:	210f      	movs	r1, #15
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	f7ff ff8e 	bl	8000a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <SysTick_Config+0x40>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b42:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <SysTick_Config+0x40>)
 8000b44:	2207      	movs	r2, #7
 8000b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	e000e010 	.word	0xe000e010

08000b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff ff47 	bl	80009f4 <__NVIC_SetPriorityGrouping>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b086      	sub	sp, #24
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	4603      	mov	r3, r0
 8000b76:	60b9      	str	r1, [r7, #8]
 8000b78:	607a      	str	r2, [r7, #4]
 8000b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b80:	f7ff ff5c 	bl	8000a3c <__NVIC_GetPriorityGrouping>
 8000b84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	68b9      	ldr	r1, [r7, #8]
 8000b8a:	6978      	ldr	r0, [r7, #20]
 8000b8c:	f7ff ff8e 	bl	8000aac <NVIC_EncodePriority>
 8000b90:	4602      	mov	r2, r0
 8000b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b96:	4611      	mov	r1, r2
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ff5d 	bl	8000a58 <__NVIC_SetPriority>
}
 8000b9e:	bf00      	nop
 8000ba0:	3718      	adds	r7, #24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ffb0 	bl	8000b14 <SysTick_Config>
 8000bb4:	4603      	mov	r3, r0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b086      	sub	sp, #24
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f001 ff5d 	bl	8002a94 <USB_GetMode>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	f040 80ef 	bne.w	8000dc0 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f001 ff41 	bl	8002a6e <USB_ReadInterrupts>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f000 80e5 	beq.w	8000dbe <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f001 ff38 	bl	8002a6e <USB_ReadInterrupts>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000c08:	d104      	bne.n	8000c14 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000c12:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f001 ff28 	bl	8002a6e <USB_ReadInterrupts>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000c28:	d104      	bne.n	8000c34 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000c32:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f001 ff18 	bl	8002a6e <USB_ReadInterrupts>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000c48:	d104      	bne.n	8000c54 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c52:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f001 ff08 	bl	8002a6e <USB_ReadInterrupts>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	f003 0302 	and.w	r3, r3, #2
 8000c64:	2b02      	cmp	r3, #2
 8000c66:	d103      	bne.n	8000c70 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2202      	movs	r2, #2
 8000c6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f001 fefa 	bl	8002a6e <USB_ReadInterrupts>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c84:	d115      	bne.n	8000cb2 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000c8e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d108      	bne.n	8000cb2 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f002 f9ad 	bl	8003000 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2101      	movs	r1, #1
 8000cac:	4618      	mov	r0, r3
 8000cae:	f001 feff 	bl	8002ab0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f001 fed9 	bl	8002a6e <USB_ReadInterrupts>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000cc2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc6:	d102      	bne.n	8000cce <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f001 f98a 	bl	8001fe2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f001 fecb 	bl	8002a6e <USB_ReadInterrupts>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	f003 0308 	and.w	r3, r3, #8
 8000cde:	2b08      	cmp	r3, #8
 8000ce0:	d106      	bne.n	8000cf0 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f002 f970 	bl	8002fc8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2208      	movs	r2, #8
 8000cee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f001 feba 	bl	8002a6e <USB_ReadInterrupts>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	f003 0310 	and.w	r3, r3, #16
 8000d00:	2b10      	cmp	r3, #16
 8000d02:	d101      	bne.n	8000d08 <HAL_HCD_IRQHandler+0x14a>
 8000d04:	2301      	movs	r3, #1
 8000d06:	e000      	b.n	8000d0a <HAL_HCD_IRQHandler+0x14c>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d012      	beq.n	8000d34 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	699a      	ldr	r2, [r3, #24]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f022 0210 	bic.w	r2, r2, #16
 8000d1c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f001 f88d 	bl	8001e3e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	699a      	ldr	r2, [r3, #24]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f042 0210 	orr.w	r2, r2, #16
 8000d32:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f001 fe98 	bl	8002a6e <USB_ReadInterrupts>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000d48:	d13a      	bne.n	8000dc0 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f001 fee8 	bl	8002b24 <USB_HC_ReadInterrupt>
 8000d54:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
 8000d5a:	e025      	b.n	8000da8 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	f003 030f 	and.w	r3, r3, #15
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	fa22 f303 	lsr.w	r3, r2, r3
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d018      	beq.n	8000da2 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	015a      	lsls	r2, r3, #5
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4413      	add	r3, r2
 8000d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d86:	d106      	bne.n	8000d96 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f000 f836 	bl	8000e00 <HCD_HC_IN_IRQHandler>
 8000d94:	e005      	b.n	8000da2 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f000 fc51 	bl	8001644 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	3301      	adds	r3, #1
 8000da6:	617b      	str	r3, [r7, #20]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	697a      	ldr	r2, [r7, #20]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d3d4      	bcc.n	8000d5c <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000dba:	615a      	str	r2, [r3, #20]
 8000dbc:	e000      	b.n	8000dc0 <HAL_HCD_IRQHandler+0x202>
      return;
 8000dbe:	bf00      	nop
    }
  }
}
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d101      	bne.n	8000ddc <HAL_HCD_Stop+0x16>
 8000dd8:	2302      	movs	r3, #2
 8000dda:	e00d      	b.n	8000df8 <HAL_HCD_Stop+0x32>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2201      	movs	r2, #1
 8000de0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f001 ffc8 	bl	8002d7e <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8000df6:	2300      	movs	r3, #0
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8000e16:	78fb      	ldrb	r3, [r7, #3]
 8000e18:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	015a      	lsls	r2, r3, #5
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	4413      	add	r3, r2
 8000e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	f003 0304 	and.w	r3, r3, #4
 8000e2c:	2b04      	cmp	r3, #4
 8000e2e:	d119      	bne.n	8000e64 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	015a      	lsls	r2, r3, #5
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4413      	add	r3, r2
 8000e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	2304      	movs	r3, #4
 8000e40:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	015a      	lsls	r2, r3, #5
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	4413      	add	r3, r2
 8000e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	0151      	lsls	r1, r2, #5
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	440a      	add	r2, r1
 8000e58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8000e5c:	f043 0302 	orr.w	r3, r3, #2
 8000e60:	60d3      	str	r3, [r2, #12]
 8000e62:	e101      	b.n	8001068 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	015a      	lsls	r2, r3, #5
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e7a:	d12b      	bne.n	8000ed4 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	015a      	lsls	r2, r3, #5
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	4413      	add	r3, r2
 8000e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e88:	461a      	mov	r2, r3
 8000e8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	212c      	movs	r1, #44	; 0x2c
 8000e96:	fb01 f303 	mul.w	r3, r1, r3
 8000e9a:	4413      	add	r3, r2
 8000e9c:	3361      	adds	r3, #97	; 0x61
 8000e9e:	2207      	movs	r2, #7
 8000ea0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	015a      	lsls	r2, r3, #5
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	68fa      	ldr	r2, [r7, #12]
 8000eb2:	0151      	lsls	r1, r2, #5
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	440a      	add	r2, r1
 8000eb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	4611      	mov	r1, r2
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f001 fe3a 	bl	8002b46 <USB_HC_Halt>
 8000ed2:	e0c9      	b.n	8001068 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	015a      	lsls	r2, r3, #5
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4413      	add	r3, r2
 8000edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	f003 0320 	and.w	r3, r3, #32
 8000ee6:	2b20      	cmp	r3, #32
 8000ee8:	d109      	bne.n	8000efe <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	015a      	lsls	r2, r3, #5
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	2320      	movs	r3, #32
 8000efa:	6093      	str	r3, [r2, #8]
 8000efc:	e0b4      	b.n	8001068 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	015a      	lsls	r2, r3, #5
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	4413      	add	r3, r2
 8000f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	f003 0308 	and.w	r3, r3, #8
 8000f10:	2b08      	cmp	r3, #8
 8000f12:	d133      	bne.n	8000f7c <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	015a      	lsls	r2, r3, #5
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	0151      	lsls	r1, r2, #5
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	440a      	add	r2, r1
 8000f2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8000f2e:	f043 0302 	orr.w	r3, r3, #2
 8000f32:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	212c      	movs	r1, #44	; 0x2c
 8000f3a:	fb01 f303 	mul.w	r3, r1, r3
 8000f3e:	4413      	add	r3, r2
 8000f40:	3361      	adds	r3, #97	; 0x61
 8000f42:	2205      	movs	r2, #5
 8000f44:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	015a      	lsls	r2, r3, #5
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f52:	461a      	mov	r2, r3
 8000f54:	2310      	movs	r3, #16
 8000f56:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	015a      	lsls	r2, r3, #5
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	4413      	add	r3, r2
 8000f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f64:	461a      	mov	r2, r3
 8000f66:	2308      	movs	r3, #8
 8000f68:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	4611      	mov	r1, r2
 8000f74:	4618      	mov	r0, r3
 8000f76:	f001 fde6 	bl	8002b46 <USB_HC_Halt>
 8000f7a:	e075      	b.n	8001068 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	015a      	lsls	r2, r3, #5
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	4413      	add	r3, r2
 8000f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f92:	d134      	bne.n	8000ffe <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	015a      	lsls	r2, r3, #5
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	0151      	lsls	r1, r2, #5
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	440a      	add	r2, r1
 8000faa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8000fae:	f043 0302 	orr.w	r3, r3, #2
 8000fb2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	212c      	movs	r1, #44	; 0x2c
 8000fba:	fb01 f303 	mul.w	r3, r1, r3
 8000fbe:	4413      	add	r3, r2
 8000fc0:	3361      	adds	r3, #97	; 0x61
 8000fc2:	2208      	movs	r2, #8
 8000fc4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	015a      	lsls	r2, r3, #5
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	4413      	add	r3, r2
 8000fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	2310      	movs	r3, #16
 8000fd6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	015a      	lsls	r2, r3, #5
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4413      	add	r3, r2
 8000fe0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fea:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	68fa      	ldr	r2, [r7, #12]
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f001 fda5 	bl	8002b46 <USB_HC_Halt>
 8000ffc:	e034      	b.n	8001068 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	015a      	lsls	r2, r3, #5
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	4413      	add	r3, r2
 8001006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001010:	2b80      	cmp	r3, #128	; 0x80
 8001012:	d129      	bne.n	8001068 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	015a      	lsls	r2, r3, #5
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	4413      	add	r3, r2
 800101c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	0151      	lsls	r1, r2, #5
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	440a      	add	r2, r1
 800102a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800102e:	f043 0302 	orr.w	r3, r3, #2
 8001032:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	212c      	movs	r1, #44	; 0x2c
 800103a:	fb01 f303 	mul.w	r3, r1, r3
 800103e:	4413      	add	r3, r2
 8001040:	3361      	adds	r3, #97	; 0x61
 8001042:	2206      	movs	r2, #6
 8001044:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f001 fd78 	bl	8002b46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	015a      	lsls	r2, r3, #5
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	4413      	add	r3, r2
 800105e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001062:	461a      	mov	r2, r3
 8001064:	2380      	movs	r3, #128	; 0x80
 8001066:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	015a      	lsls	r2, r3, #5
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	4413      	add	r3, r2
 8001070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800107a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800107e:	d122      	bne.n	80010c6 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	015a      	lsls	r2, r3, #5
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	4413      	add	r3, r2
 8001088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	0151      	lsls	r1, r2, #5
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	440a      	add	r2, r1
 8001096:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800109a:	f043 0302 	orr.w	r3, r3, #2
 800109e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	4611      	mov	r1, r2
 80010aa:	4618      	mov	r0, r3
 80010ac:	f001 fd4b 	bl	8002b46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	015a      	lsls	r2, r3, #5
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4413      	add	r3, r2
 80010b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010bc:	461a      	mov	r2, r3
 80010be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010c2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80010c4:	e2ba      	b.n	800163c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	015a      	lsls	r2, r3, #5
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4413      	add	r3, r2
 80010ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	2b01      	cmp	r3, #1
 80010da:	f040 811b 	bne.w	8001314 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d019      	beq.n	800111a <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	212c      	movs	r1, #44	; 0x2c
 80010ec:	fb01 f303 	mul.w	r3, r1, r3
 80010f0:	4413      	add	r3, r2
 80010f2:	3348      	adds	r3, #72	; 0x48
 80010f4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	0159      	lsls	r1, r3, #5
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	440b      	add	r3, r1
 80010fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001108:	1ad2      	subs	r2, r2, r3
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	202c      	movs	r0, #44	; 0x2c
 8001110:	fb00 f303 	mul.w	r3, r0, r3
 8001114:	440b      	add	r3, r1
 8001116:	3350      	adds	r3, #80	; 0x50
 8001118:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	212c      	movs	r1, #44	; 0x2c
 8001120:	fb01 f303 	mul.w	r3, r1, r3
 8001124:	4413      	add	r3, r2
 8001126:	3361      	adds	r3, #97	; 0x61
 8001128:	2201      	movs	r2, #1
 800112a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	212c      	movs	r1, #44	; 0x2c
 8001132:	fb01 f303 	mul.w	r3, r1, r3
 8001136:	4413      	add	r3, r2
 8001138:	335c      	adds	r3, #92	; 0x5c
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	015a      	lsls	r2, r3, #5
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	4413      	add	r3, r2
 8001146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800114a:	461a      	mov	r2, r3
 800114c:	2301      	movs	r3, #1
 800114e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	212c      	movs	r1, #44	; 0x2c
 8001156:	fb01 f303 	mul.w	r3, r1, r3
 800115a:	4413      	add	r3, r2
 800115c:	333f      	adds	r3, #63	; 0x3f
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d009      	beq.n	8001178 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	212c      	movs	r1, #44	; 0x2c
 800116a:	fb01 f303 	mul.w	r3, r1, r3
 800116e:	4413      	add	r3, r2
 8001170:	333f      	adds	r3, #63	; 0x3f
 8001172:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001174:	2b02      	cmp	r3, #2
 8001176:	d121      	bne.n	80011bc <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	015a      	lsls	r2, r3, #5
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4413      	add	r3, r2
 8001180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	0151      	lsls	r1, r2, #5
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	440a      	add	r2, r1
 800118e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001192:	f043 0302 	orr.w	r3, r3, #2
 8001196:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	4611      	mov	r1, r2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f001 fccf 	bl	8002b46 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	015a      	lsls	r2, r3, #5
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	4413      	add	r3, r2
 80011b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011b4:	461a      	mov	r2, r3
 80011b6:	2310      	movs	r3, #16
 80011b8:	6093      	str	r3, [r2, #8]
 80011ba:	e066      	b.n	800128a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	212c      	movs	r1, #44	; 0x2c
 80011c2:	fb01 f303 	mul.w	r3, r1, r3
 80011c6:	4413      	add	r3, r2
 80011c8:	333f      	adds	r3, #63	; 0x3f
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b03      	cmp	r3, #3
 80011ce:	d127      	bne.n	8001220 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	015a      	lsls	r2, r3, #5
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4413      	add	r3, r2
 80011d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	0151      	lsls	r1, r2, #5
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	440a      	add	r2, r1
 80011e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80011ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80011ee:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	212c      	movs	r1, #44	; 0x2c
 80011f6:	fb01 f303 	mul.w	r3, r1, r3
 80011fa:	4413      	add	r3, r2
 80011fc:	3360      	adds	r3, #96	; 0x60
 80011fe:	2201      	movs	r2, #1
 8001200:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	b2d9      	uxtb	r1, r3
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	202c      	movs	r0, #44	; 0x2c
 800120c:	fb00 f303 	mul.w	r3, r0, r3
 8001210:	4413      	add	r3, r2
 8001212:	3360      	adds	r3, #96	; 0x60
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	461a      	mov	r2, r3
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f001 feff 	bl	800301c <HAL_HCD_HC_NotifyURBChange_Callback>
 800121e:	e034      	b.n	800128a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	212c      	movs	r1, #44	; 0x2c
 8001226:	fb01 f303 	mul.w	r3, r1, r3
 800122a:	4413      	add	r3, r2
 800122c:	333f      	adds	r3, #63	; 0x3f
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d12a      	bne.n	800128a <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	212c      	movs	r1, #44	; 0x2c
 800123a:	fb01 f303 	mul.w	r3, r1, r3
 800123e:	4413      	add	r3, r2
 8001240:	3360      	adds	r3, #96	; 0x60
 8001242:	2201      	movs	r2, #1
 8001244:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	212c      	movs	r1, #44	; 0x2c
 800124c:	fb01 f303 	mul.w	r3, r1, r3
 8001250:	4413      	add	r3, r2
 8001252:	3354      	adds	r3, #84	; 0x54
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	f083 0301 	eor.w	r3, r3, #1
 800125a:	b2d8      	uxtb	r0, r3
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	212c      	movs	r1, #44	; 0x2c
 8001262:	fb01 f303 	mul.w	r3, r1, r3
 8001266:	4413      	add	r3, r2
 8001268:	3354      	adds	r3, #84	; 0x54
 800126a:	4602      	mov	r2, r0
 800126c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	b2d9      	uxtb	r1, r3
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	202c      	movs	r0, #44	; 0x2c
 8001278:	fb00 f303 	mul.w	r3, r0, r3
 800127c:	4413      	add	r3, r2
 800127e:	3360      	adds	r3, #96	; 0x60
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	461a      	mov	r2, r3
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f001 fec9 	bl	800301c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d12b      	bne.n	80012ea <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	212c      	movs	r1, #44	; 0x2c
 8001298:	fb01 f303 	mul.w	r3, r1, r3
 800129c:	4413      	add	r3, r2
 800129e:	3348      	adds	r3, #72	; 0x48
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	68fa      	ldr	r2, [r7, #12]
 80012a6:	202c      	movs	r0, #44	; 0x2c
 80012a8:	fb00 f202 	mul.w	r2, r0, r2
 80012ac:	440a      	add	r2, r1
 80012ae:	3240      	adds	r2, #64	; 0x40
 80012b0:	8812      	ldrh	r2, [r2, #0]
 80012b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 81be 	beq.w	800163c <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	212c      	movs	r1, #44	; 0x2c
 80012c6:	fb01 f303 	mul.w	r3, r1, r3
 80012ca:	4413      	add	r3, r2
 80012cc:	3354      	adds	r3, #84	; 0x54
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	f083 0301 	eor.w	r3, r3, #1
 80012d4:	b2d8      	uxtb	r0, r3
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	212c      	movs	r1, #44	; 0x2c
 80012dc:	fb01 f303 	mul.w	r3, r1, r3
 80012e0:	4413      	add	r3, r2
 80012e2:	3354      	adds	r3, #84	; 0x54
 80012e4:	4602      	mov	r2, r0
 80012e6:	701a      	strb	r2, [r3, #0]
}
 80012e8:	e1a8      	b.n	800163c <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	212c      	movs	r1, #44	; 0x2c
 80012f0:	fb01 f303 	mul.w	r3, r1, r3
 80012f4:	4413      	add	r3, r2
 80012f6:	3354      	adds	r3, #84	; 0x54
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	f083 0301 	eor.w	r3, r3, #1
 80012fe:	b2d8      	uxtb	r0, r3
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	212c      	movs	r1, #44	; 0x2c
 8001306:	fb01 f303 	mul.w	r3, r1, r3
 800130a:	4413      	add	r3, r2
 800130c:	3354      	adds	r3, #84	; 0x54
 800130e:	4602      	mov	r2, r0
 8001310:	701a      	strb	r2, [r3, #0]
}
 8001312:	e193      	b.n	800163c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	015a      	lsls	r2, r3, #5
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4413      	add	r3, r2
 800131c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b02      	cmp	r3, #2
 8001328:	f040 8106 	bne.w	8001538 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	015a      	lsls	r2, r3, #5
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	4413      	add	r3, r2
 8001334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	0151      	lsls	r1, r2, #5
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	440a      	add	r2, r1
 8001342:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001346:	f023 0302 	bic.w	r3, r3, #2
 800134a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	212c      	movs	r1, #44	; 0x2c
 8001352:	fb01 f303 	mul.w	r3, r1, r3
 8001356:	4413      	add	r3, r2
 8001358:	3361      	adds	r3, #97	; 0x61
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d109      	bne.n	8001374 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	212c      	movs	r1, #44	; 0x2c
 8001366:	fb01 f303 	mul.w	r3, r1, r3
 800136a:	4413      	add	r3, r2
 800136c:	3360      	adds	r3, #96	; 0x60
 800136e:	2201      	movs	r2, #1
 8001370:	701a      	strb	r2, [r3, #0]
 8001372:	e0c9      	b.n	8001508 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	212c      	movs	r1, #44	; 0x2c
 800137a:	fb01 f303 	mul.w	r3, r1, r3
 800137e:	4413      	add	r3, r2
 8001380:	3361      	adds	r3, #97	; 0x61
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b05      	cmp	r3, #5
 8001386:	d109      	bne.n	800139c <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	212c      	movs	r1, #44	; 0x2c
 800138e:	fb01 f303 	mul.w	r3, r1, r3
 8001392:	4413      	add	r3, r2
 8001394:	3360      	adds	r3, #96	; 0x60
 8001396:	2205      	movs	r2, #5
 8001398:	701a      	strb	r2, [r3, #0]
 800139a:	e0b5      	b.n	8001508 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	212c      	movs	r1, #44	; 0x2c
 80013a2:	fb01 f303 	mul.w	r3, r1, r3
 80013a6:	4413      	add	r3, r2
 80013a8:	3361      	adds	r3, #97	; 0x61
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b06      	cmp	r3, #6
 80013ae:	d009      	beq.n	80013c4 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	212c      	movs	r1, #44	; 0x2c
 80013b6:	fb01 f303 	mul.w	r3, r1, r3
 80013ba:	4413      	add	r3, r2
 80013bc:	3361      	adds	r3, #97	; 0x61
 80013be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80013c0:	2b08      	cmp	r3, #8
 80013c2:	d150      	bne.n	8001466 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	212c      	movs	r1, #44	; 0x2c
 80013ca:	fb01 f303 	mul.w	r3, r1, r3
 80013ce:	4413      	add	r3, r2
 80013d0:	335c      	adds	r3, #92	; 0x5c
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	1c5a      	adds	r2, r3, #1
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	202c      	movs	r0, #44	; 0x2c
 80013dc:	fb00 f303 	mul.w	r3, r0, r3
 80013e0:	440b      	add	r3, r1
 80013e2:	335c      	adds	r3, #92	; 0x5c
 80013e4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	212c      	movs	r1, #44	; 0x2c
 80013ec:	fb01 f303 	mul.w	r3, r1, r3
 80013f0:	4413      	add	r3, r2
 80013f2:	335c      	adds	r3, #92	; 0x5c
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d912      	bls.n	8001420 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	212c      	movs	r1, #44	; 0x2c
 8001400:	fb01 f303 	mul.w	r3, r1, r3
 8001404:	4413      	add	r3, r2
 8001406:	335c      	adds	r3, #92	; 0x5c
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	212c      	movs	r1, #44	; 0x2c
 8001412:	fb01 f303 	mul.w	r3, r1, r3
 8001416:	4413      	add	r3, r2
 8001418:	3360      	adds	r3, #96	; 0x60
 800141a:	2204      	movs	r2, #4
 800141c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800141e:	e073      	b.n	8001508 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	212c      	movs	r1, #44	; 0x2c
 8001426:	fb01 f303 	mul.w	r3, r1, r3
 800142a:	4413      	add	r3, r2
 800142c:	3360      	adds	r3, #96	; 0x60
 800142e:	2202      	movs	r2, #2
 8001430:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	015a      	lsls	r2, r3, #5
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4413      	add	r3, r2
 800143a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001448:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001450:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	015a      	lsls	r2, r3, #5
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	4413      	add	r3, r2
 800145a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800145e:	461a      	mov	r2, r3
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001464:	e050      	b.n	8001508 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	212c      	movs	r1, #44	; 0x2c
 800146c:	fb01 f303 	mul.w	r3, r1, r3
 8001470:	4413      	add	r3, r2
 8001472:	3361      	adds	r3, #97	; 0x61
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b03      	cmp	r3, #3
 8001478:	d122      	bne.n	80014c0 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	212c      	movs	r1, #44	; 0x2c
 8001480:	fb01 f303 	mul.w	r3, r1, r3
 8001484:	4413      	add	r3, r2
 8001486:	3360      	adds	r3, #96	; 0x60
 8001488:	2202      	movs	r2, #2
 800148a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	015a      	lsls	r2, r3, #5
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4413      	add	r3, r2
 8001494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80014a2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80014aa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	015a      	lsls	r2, r3, #5
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4413      	add	r3, r2
 80014b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014b8:	461a      	mov	r2, r3
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	e023      	b.n	8001508 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	212c      	movs	r1, #44	; 0x2c
 80014c6:	fb01 f303 	mul.w	r3, r1, r3
 80014ca:	4413      	add	r3, r2
 80014cc:	3361      	adds	r3, #97	; 0x61
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b07      	cmp	r3, #7
 80014d2:	d119      	bne.n	8001508 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	212c      	movs	r1, #44	; 0x2c
 80014da:	fb01 f303 	mul.w	r3, r1, r3
 80014de:	4413      	add	r3, r2
 80014e0:	335c      	adds	r3, #92	; 0x5c
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	1c5a      	adds	r2, r3, #1
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	202c      	movs	r0, #44	; 0x2c
 80014ec:	fb00 f303 	mul.w	r3, r0, r3
 80014f0:	440b      	add	r3, r1
 80014f2:	335c      	adds	r3, #92	; 0x5c
 80014f4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	212c      	movs	r1, #44	; 0x2c
 80014fc:	fb01 f303 	mul.w	r3, r1, r3
 8001500:	4413      	add	r3, r2
 8001502:	3360      	adds	r3, #96	; 0x60
 8001504:	2204      	movs	r2, #4
 8001506:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	015a      	lsls	r2, r3, #5
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	4413      	add	r3, r2
 8001510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001514:	461a      	mov	r2, r3
 8001516:	2302      	movs	r3, #2
 8001518:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	b2d9      	uxtb	r1, r3
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	202c      	movs	r0, #44	; 0x2c
 8001524:	fb00 f303 	mul.w	r3, r0, r3
 8001528:	4413      	add	r3, r2
 800152a:	3360      	adds	r3, #96	; 0x60
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f001 fd73 	bl	800301c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001536:	e081      	b.n	800163c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	015a      	lsls	r2, r3, #5
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	4413      	add	r3, r2
 8001540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 0310 	and.w	r3, r3, #16
 800154a:	2b10      	cmp	r3, #16
 800154c:	d176      	bne.n	800163c <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	212c      	movs	r1, #44	; 0x2c
 8001554:	fb01 f303 	mul.w	r3, r1, r3
 8001558:	4413      	add	r3, r2
 800155a:	333f      	adds	r3, #63	; 0x3f
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b03      	cmp	r3, #3
 8001560:	d121      	bne.n	80015a6 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	212c      	movs	r1, #44	; 0x2c
 8001568:	fb01 f303 	mul.w	r3, r1, r3
 800156c:	4413      	add	r3, r2
 800156e:	335c      	adds	r3, #92	; 0x5c
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	015a      	lsls	r2, r3, #5
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	4413      	add	r3, r2
 800157c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	0151      	lsls	r1, r2, #5
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	440a      	add	r2, r1
 800158a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800158e:	f043 0302 	orr.w	r3, r3, #2
 8001592:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	4611      	mov	r1, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	f001 fad1 	bl	8002b46 <USB_HC_Halt>
 80015a4:	e041      	b.n	800162a <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	212c      	movs	r1, #44	; 0x2c
 80015ac:	fb01 f303 	mul.w	r3, r1, r3
 80015b0:	4413      	add	r3, r2
 80015b2:	333f      	adds	r3, #63	; 0x3f
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d009      	beq.n	80015ce <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	212c      	movs	r1, #44	; 0x2c
 80015c0:	fb01 f303 	mul.w	r3, r1, r3
 80015c4:	4413      	add	r3, r2
 80015c6:	333f      	adds	r3, #63	; 0x3f
 80015c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d12d      	bne.n	800162a <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	212c      	movs	r1, #44	; 0x2c
 80015d4:	fb01 f303 	mul.w	r3, r1, r3
 80015d8:	4413      	add	r3, r2
 80015da:	335c      	adds	r3, #92	; 0x5c
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d120      	bne.n	800162a <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	212c      	movs	r1, #44	; 0x2c
 80015ee:	fb01 f303 	mul.w	r3, r1, r3
 80015f2:	4413      	add	r3, r2
 80015f4:	3361      	adds	r3, #97	; 0x61
 80015f6:	2203      	movs	r2, #3
 80015f8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	015a      	lsls	r2, r3, #5
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4413      	add	r3, r2
 8001602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	0151      	lsls	r1, r2, #5
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	440a      	add	r2, r1
 8001610:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	4611      	mov	r1, r2
 8001624:	4618      	mov	r0, r3
 8001626:	f001 fa8e 	bl	8002b46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	015a      	lsls	r2, r3, #5
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	4413      	add	r3, r2
 8001632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001636:	461a      	mov	r2, r3
 8001638:	2310      	movs	r3, #16
 800163a:	6093      	str	r3, [r2, #8]
}
 800163c:	bf00      	nop
 800163e:	3718      	adds	r7, #24
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b088      	sub	sp, #32
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800165a:	78fb      	ldrb	r3, [r7, #3]
 800165c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	015a      	lsls	r2, r3, #5
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	4413      	add	r3, r2
 8001666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	2b04      	cmp	r3, #4
 8001672:	d119      	bne.n	80016a8 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	015a      	lsls	r2, r3, #5
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	4413      	add	r3, r2
 800167c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001680:	461a      	mov	r2, r3
 8001682:	2304      	movs	r3, #4
 8001684:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	015a      	lsls	r2, r3, #5
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	4413      	add	r3, r2
 800168e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	0151      	lsls	r1, r2, #5
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	440a      	add	r2, r1
 800169c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80016a0:	f043 0302 	orr.w	r3, r3, #2
 80016a4:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80016a6:	e3c6      	b.n	8001e36 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	015a      	lsls	r2, r3, #5
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	4413      	add	r3, r2
 80016b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 0320 	and.w	r3, r3, #32
 80016ba:	2b20      	cmp	r3, #32
 80016bc:	d13e      	bne.n	800173c <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	015a      	lsls	r2, r3, #5
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	4413      	add	r3, r2
 80016c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016ca:	461a      	mov	r2, r3
 80016cc:	2320      	movs	r3, #32
 80016ce:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	212c      	movs	r1, #44	; 0x2c
 80016d6:	fb01 f303 	mul.w	r3, r1, r3
 80016da:	4413      	add	r3, r2
 80016dc:	333d      	adds	r3, #61	; 0x3d
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	f040 83a8 	bne.w	8001e36 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	212c      	movs	r1, #44	; 0x2c
 80016ec:	fb01 f303 	mul.w	r3, r1, r3
 80016f0:	4413      	add	r3, r2
 80016f2:	333d      	adds	r3, #61	; 0x3d
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	212c      	movs	r1, #44	; 0x2c
 80016fe:	fb01 f303 	mul.w	r3, r1, r3
 8001702:	4413      	add	r3, r2
 8001704:	3360      	adds	r3, #96	; 0x60
 8001706:	2202      	movs	r2, #2
 8001708:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	015a      	lsls	r2, r3, #5
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	4413      	add	r3, r2
 8001712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	0151      	lsls	r1, r2, #5
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	440a      	add	r2, r1
 8001720:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001724:	f043 0302 	orr.w	r3, r3, #2
 8001728:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	4611      	mov	r1, r2
 8001734:	4618      	mov	r0, r3
 8001736:	f001 fa06 	bl	8002b46 <USB_HC_Halt>
}
 800173a:	e37c      	b.n	8001e36 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	015a      	lsls	r2, r3, #5
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	4413      	add	r3, r2
 8001744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800174e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001752:	d122      	bne.n	800179a <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	015a      	lsls	r2, r3, #5
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	4413      	add	r3, r2
 800175c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	0151      	lsls	r1, r2, #5
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	440a      	add	r2, r1
 800176a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800176e:	f043 0302 	orr.w	r3, r3, #2
 8001772:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	4611      	mov	r1, r2
 800177e:	4618      	mov	r0, r3
 8001780:	f001 f9e1 	bl	8002b46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	015a      	lsls	r2, r3, #5
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	4413      	add	r3, r2
 800178c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001790:	461a      	mov	r2, r3
 8001792:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001796:	6093      	str	r3, [r2, #8]
}
 8001798:	e34d      	b.n	8001e36 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	015a      	lsls	r2, r3, #5
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	4413      	add	r3, r2
 80017a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d150      	bne.n	8001852 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	212c      	movs	r1, #44	; 0x2c
 80017b6:	fb01 f303 	mul.w	r3, r1, r3
 80017ba:	4413      	add	r3, r2
 80017bc:	335c      	adds	r3, #92	; 0x5c
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	015a      	lsls	r2, r3, #5
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	4413      	add	r3, r2
 80017ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d4:	2b40      	cmp	r3, #64	; 0x40
 80017d6:	d111      	bne.n	80017fc <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	212c      	movs	r1, #44	; 0x2c
 80017de:	fb01 f303 	mul.w	r3, r1, r3
 80017e2:	4413      	add	r3, r2
 80017e4:	333d      	adds	r3, #61	; 0x3d
 80017e6:	2201      	movs	r2, #1
 80017e8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	015a      	lsls	r2, r3, #5
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	4413      	add	r3, r2
 80017f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017f6:	461a      	mov	r2, r3
 80017f8:	2340      	movs	r3, #64	; 0x40
 80017fa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	015a      	lsls	r2, r3, #5
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	4413      	add	r3, r2
 8001804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	0151      	lsls	r1, r2, #5
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	440a      	add	r2, r1
 8001812:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001816:	f043 0302 	orr.w	r3, r3, #2
 800181a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	4611      	mov	r1, r2
 8001826:	4618      	mov	r0, r3
 8001828:	f001 f98d 	bl	8002b46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	015a      	lsls	r2, r3, #5
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	4413      	add	r3, r2
 8001834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001838:	461a      	mov	r2, r3
 800183a:	2301      	movs	r3, #1
 800183c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	212c      	movs	r1, #44	; 0x2c
 8001844:	fb01 f303 	mul.w	r3, r1, r3
 8001848:	4413      	add	r3, r2
 800184a:	3361      	adds	r3, #97	; 0x61
 800184c:	2201      	movs	r2, #1
 800184e:	701a      	strb	r2, [r3, #0]
}
 8001850:	e2f1      	b.n	8001e36 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	015a      	lsls	r2, r3, #5
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	4413      	add	r3, r2
 800185a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001864:	2b40      	cmp	r3, #64	; 0x40
 8001866:	d13c      	bne.n	80018e2 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	212c      	movs	r1, #44	; 0x2c
 800186e:	fb01 f303 	mul.w	r3, r1, r3
 8001872:	4413      	add	r3, r2
 8001874:	3361      	adds	r3, #97	; 0x61
 8001876:	2204      	movs	r2, #4
 8001878:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	212c      	movs	r1, #44	; 0x2c
 8001880:	fb01 f303 	mul.w	r3, r1, r3
 8001884:	4413      	add	r3, r2
 8001886:	333d      	adds	r3, #61	; 0x3d
 8001888:	2201      	movs	r2, #1
 800188a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	212c      	movs	r1, #44	; 0x2c
 8001892:	fb01 f303 	mul.w	r3, r1, r3
 8001896:	4413      	add	r3, r2
 8001898:	335c      	adds	r3, #92	; 0x5c
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	015a      	lsls	r2, r3, #5
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	4413      	add	r3, r2
 80018a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	697a      	ldr	r2, [r7, #20]
 80018ae:	0151      	lsls	r1, r2, #5
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	440a      	add	r2, r1
 80018b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	4611      	mov	r1, r2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f001 f93c 	bl	8002b46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	015a      	lsls	r2, r3, #5
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	4413      	add	r3, r2
 80018d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018da:	461a      	mov	r2, r3
 80018dc:	2340      	movs	r3, #64	; 0x40
 80018de:	6093      	str	r3, [r2, #8]
}
 80018e0:	e2a9      	b.n	8001e36 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	015a      	lsls	r2, r3, #5
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	4413      	add	r3, r2
 80018ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	2b08      	cmp	r3, #8
 80018f6:	d12a      	bne.n	800194e <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	015a      	lsls	r2, r3, #5
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	4413      	add	r3, r2
 8001900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001904:	461a      	mov	r2, r3
 8001906:	2308      	movs	r3, #8
 8001908:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	015a      	lsls	r2, r3, #5
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	4413      	add	r3, r2
 8001912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	0151      	lsls	r1, r2, #5
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	440a      	add	r2, r1
 8001920:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001924:	f043 0302 	orr.w	r3, r3, #2
 8001928:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	4611      	mov	r1, r2
 8001934:	4618      	mov	r0, r3
 8001936:	f001 f906 	bl	8002b46 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	212c      	movs	r1, #44	; 0x2c
 8001940:	fb01 f303 	mul.w	r3, r1, r3
 8001944:	4413      	add	r3, r2
 8001946:	3361      	adds	r3, #97	; 0x61
 8001948:	2205      	movs	r2, #5
 800194a:	701a      	strb	r2, [r3, #0]
}
 800194c:	e273      	b.n	8001e36 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	015a      	lsls	r2, r3, #5
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	4413      	add	r3, r2
 8001956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 0310 	and.w	r3, r3, #16
 8001960:	2b10      	cmp	r3, #16
 8001962:	d150      	bne.n	8001a06 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	212c      	movs	r1, #44	; 0x2c
 800196a:	fb01 f303 	mul.w	r3, r1, r3
 800196e:	4413      	add	r3, r2
 8001970:	335c      	adds	r3, #92	; 0x5c
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	212c      	movs	r1, #44	; 0x2c
 800197c:	fb01 f303 	mul.w	r3, r1, r3
 8001980:	4413      	add	r3, r2
 8001982:	3361      	adds	r3, #97	; 0x61
 8001984:	2203      	movs	r2, #3
 8001986:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	212c      	movs	r1, #44	; 0x2c
 800198e:	fb01 f303 	mul.w	r3, r1, r3
 8001992:	4413      	add	r3, r2
 8001994:	333d      	adds	r3, #61	; 0x3d
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d112      	bne.n	80019c2 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	212c      	movs	r1, #44	; 0x2c
 80019a2:	fb01 f303 	mul.w	r3, r1, r3
 80019a6:	4413      	add	r3, r2
 80019a8:	333c      	adds	r3, #60	; 0x3c
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d108      	bne.n	80019c2 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	212c      	movs	r1, #44	; 0x2c
 80019b6:	fb01 f303 	mul.w	r3, r1, r3
 80019ba:	4413      	add	r3, r2
 80019bc:	333d      	adds	r3, #61	; 0x3d
 80019be:	2201      	movs	r2, #1
 80019c0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	015a      	lsls	r2, r3, #5
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	4413      	add	r3, r2
 80019ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	0151      	lsls	r1, r2, #5
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	440a      	add	r2, r1
 80019d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	4611      	mov	r1, r2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f001 f8aa 	bl	8002b46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	015a      	lsls	r2, r3, #5
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	4413      	add	r3, r2
 80019fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019fe:	461a      	mov	r2, r3
 8001a00:	2310      	movs	r3, #16
 8001a02:	6093      	str	r3, [r2, #8]
}
 8001a04:	e217      	b.n	8001e36 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	015a      	lsls	r2, r3, #5
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a18:	2b80      	cmp	r3, #128	; 0x80
 8001a1a:	d174      	bne.n	8001b06 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d121      	bne.n	8001a68 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	212c      	movs	r1, #44	; 0x2c
 8001a2a:	fb01 f303 	mul.w	r3, r1, r3
 8001a2e:	4413      	add	r3, r2
 8001a30:	3361      	adds	r3, #97	; 0x61
 8001a32:	2206      	movs	r2, #6
 8001a34:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	015a      	lsls	r2, r3, #5
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	0151      	lsls	r1, r2, #5
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	440a      	add	r2, r1
 8001a4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a50:	f043 0302 	orr.w	r3, r3, #2
 8001a54:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f001 f870 	bl	8002b46 <USB_HC_Halt>
 8001a66:	e044      	b.n	8001af2 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	212c      	movs	r1, #44	; 0x2c
 8001a6e:	fb01 f303 	mul.w	r3, r1, r3
 8001a72:	4413      	add	r3, r2
 8001a74:	335c      	adds	r3, #92	; 0x5c
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	1c5a      	adds	r2, r3, #1
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	202c      	movs	r0, #44	; 0x2c
 8001a80:	fb00 f303 	mul.w	r3, r0, r3
 8001a84:	440b      	add	r3, r1
 8001a86:	335c      	adds	r3, #92	; 0x5c
 8001a88:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	212c      	movs	r1, #44	; 0x2c
 8001a90:	fb01 f303 	mul.w	r3, r1, r3
 8001a94:	4413      	add	r3, r2
 8001a96:	335c      	adds	r3, #92	; 0x5c
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d920      	bls.n	8001ae0 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	212c      	movs	r1, #44	; 0x2c
 8001aa4:	fb01 f303 	mul.w	r3, r1, r3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	335c      	adds	r3, #92	; 0x5c
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	212c      	movs	r1, #44	; 0x2c
 8001ab6:	fb01 f303 	mul.w	r3, r1, r3
 8001aba:	4413      	add	r3, r2
 8001abc:	3360      	adds	r3, #96	; 0x60
 8001abe:	2204      	movs	r2, #4
 8001ac0:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	b2d9      	uxtb	r1, r3
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	202c      	movs	r0, #44	; 0x2c
 8001acc:	fb00 f303 	mul.w	r3, r0, r3
 8001ad0:	4413      	add	r3, r2
 8001ad2:	3360      	adds	r3, #96	; 0x60
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f001 fa9f 	bl	800301c <HAL_HCD_HC_NotifyURBChange_Callback>
 8001ade:	e008      	b.n	8001af2 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	212c      	movs	r1, #44	; 0x2c
 8001ae6:	fb01 f303 	mul.w	r3, r1, r3
 8001aea:	4413      	add	r3, r2
 8001aec:	3360      	adds	r3, #96	; 0x60
 8001aee:	2202      	movs	r2, #2
 8001af0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	015a      	lsls	r2, r3, #5
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	4413      	add	r3, r2
 8001afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001afe:	461a      	mov	r2, r3
 8001b00:	2380      	movs	r3, #128	; 0x80
 8001b02:	6093      	str	r3, [r2, #8]
}
 8001b04:	e197      	b.n	8001e36 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	015a      	lsls	r2, r3, #5
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b1c:	d134      	bne.n	8001b88 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	015a      	lsls	r2, r3, #5
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	4413      	add	r3, r2
 8001b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	0151      	lsls	r1, r2, #5
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	440a      	add	r2, r1
 8001b34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b38:	f043 0302 	orr.w	r3, r3, #2
 8001b3c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	b2d2      	uxtb	r2, r2
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 fffc 	bl	8002b46 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	015a      	lsls	r2, r3, #5
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	4413      	add	r3, r2
 8001b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	2310      	movs	r3, #16
 8001b5e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	015a      	lsls	r2, r3, #5
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	4413      	add	r3, r2
 8001b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b72:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	212c      	movs	r1, #44	; 0x2c
 8001b7a:	fb01 f303 	mul.w	r3, r1, r3
 8001b7e:	4413      	add	r3, r2
 8001b80:	3361      	adds	r3, #97	; 0x61
 8001b82:	2208      	movs	r2, #8
 8001b84:	701a      	strb	r2, [r3, #0]
}
 8001b86:	e156      	b.n	8001e36 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	015a      	lsls	r2, r3, #5
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	4413      	add	r3, r2
 8001b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	f040 814b 	bne.w	8001e36 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	015a      	lsls	r2, r3, #5
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	0151      	lsls	r1, r2, #5
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	440a      	add	r2, r1
 8001bb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bba:	f023 0302 	bic.w	r3, r3, #2
 8001bbe:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	212c      	movs	r1, #44	; 0x2c
 8001bc6:	fb01 f303 	mul.w	r3, r1, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	3361      	adds	r3, #97	; 0x61
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d179      	bne.n	8001cc8 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	212c      	movs	r1, #44	; 0x2c
 8001bda:	fb01 f303 	mul.w	r3, r1, r3
 8001bde:	4413      	add	r3, r2
 8001be0:	3360      	adds	r3, #96	; 0x60
 8001be2:	2201      	movs	r2, #1
 8001be4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	212c      	movs	r1, #44	; 0x2c
 8001bec:	fb01 f303 	mul.w	r3, r1, r3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	333f      	adds	r3, #63	; 0x3f
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d00a      	beq.n	8001c10 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	212c      	movs	r1, #44	; 0x2c
 8001c00:	fb01 f303 	mul.w	r3, r1, r3
 8001c04:	4413      	add	r3, r2
 8001c06:	333f      	adds	r3, #63	; 0x3f
 8001c08:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	f040 80fc 	bne.w	8001e08 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d142      	bne.n	8001c9e <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	212c      	movs	r1, #44	; 0x2c
 8001c1e:	fb01 f303 	mul.w	r3, r1, r3
 8001c22:	4413      	add	r3, r2
 8001c24:	334c      	adds	r3, #76	; 0x4c
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 80ed 	beq.w	8001e08 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	212c      	movs	r1, #44	; 0x2c
 8001c34:	fb01 f303 	mul.w	r3, r1, r3
 8001c38:	4413      	add	r3, r2
 8001c3a:	334c      	adds	r3, #76	; 0x4c
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	202c      	movs	r0, #44	; 0x2c
 8001c44:	fb00 f202 	mul.w	r2, r0, r2
 8001c48:	440a      	add	r2, r1
 8001c4a:	3240      	adds	r2, #64	; 0x40
 8001c4c:	8812      	ldrh	r2, [r2, #0]
 8001c4e:	4413      	add	r3, r2
 8001c50:	3b01      	subs	r3, #1
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	202c      	movs	r0, #44	; 0x2c
 8001c58:	fb00 f202 	mul.w	r2, r0, r2
 8001c5c:	440a      	add	r2, r1
 8001c5e:	3240      	adds	r2, #64	; 0x40
 8001c60:	8812      	ldrh	r2, [r2, #0]
 8001c62:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 80ca 	beq.w	8001e08 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	212c      	movs	r1, #44	; 0x2c
 8001c7a:	fb01 f303 	mul.w	r3, r1, r3
 8001c7e:	4413      	add	r3, r2
 8001c80:	3355      	adds	r3, #85	; 0x55
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	f083 0301 	eor.w	r3, r3, #1
 8001c88:	b2d8      	uxtb	r0, r3
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	212c      	movs	r1, #44	; 0x2c
 8001c90:	fb01 f303 	mul.w	r3, r1, r3
 8001c94:	4413      	add	r3, r2
 8001c96:	3355      	adds	r3, #85	; 0x55
 8001c98:	4602      	mov	r2, r0
 8001c9a:	701a      	strb	r2, [r3, #0]
 8001c9c:	e0b4      	b.n	8001e08 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	212c      	movs	r1, #44	; 0x2c
 8001ca4:	fb01 f303 	mul.w	r3, r1, r3
 8001ca8:	4413      	add	r3, r2
 8001caa:	3355      	adds	r3, #85	; 0x55
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	f083 0301 	eor.w	r3, r3, #1
 8001cb2:	b2d8      	uxtb	r0, r3
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	212c      	movs	r1, #44	; 0x2c
 8001cba:	fb01 f303 	mul.w	r3, r1, r3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3355      	adds	r3, #85	; 0x55
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	701a      	strb	r2, [r3, #0]
 8001cc6:	e09f      	b.n	8001e08 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	212c      	movs	r1, #44	; 0x2c
 8001cce:	fb01 f303 	mul.w	r3, r1, r3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3361      	adds	r3, #97	; 0x61
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d109      	bne.n	8001cf0 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	212c      	movs	r1, #44	; 0x2c
 8001ce2:	fb01 f303 	mul.w	r3, r1, r3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3360      	adds	r3, #96	; 0x60
 8001cea:	2202      	movs	r2, #2
 8001cec:	701a      	strb	r2, [r3, #0]
 8001cee:	e08b      	b.n	8001e08 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	212c      	movs	r1, #44	; 0x2c
 8001cf6:	fb01 f303 	mul.w	r3, r1, r3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	3361      	adds	r3, #97	; 0x61
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b04      	cmp	r3, #4
 8001d02:	d109      	bne.n	8001d18 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	212c      	movs	r1, #44	; 0x2c
 8001d0a:	fb01 f303 	mul.w	r3, r1, r3
 8001d0e:	4413      	add	r3, r2
 8001d10:	3360      	adds	r3, #96	; 0x60
 8001d12:	2202      	movs	r2, #2
 8001d14:	701a      	strb	r2, [r3, #0]
 8001d16:	e077      	b.n	8001e08 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	212c      	movs	r1, #44	; 0x2c
 8001d1e:	fb01 f303 	mul.w	r3, r1, r3
 8001d22:	4413      	add	r3, r2
 8001d24:	3361      	adds	r3, #97	; 0x61
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b05      	cmp	r3, #5
 8001d2a:	d109      	bne.n	8001d40 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	212c      	movs	r1, #44	; 0x2c
 8001d32:	fb01 f303 	mul.w	r3, r1, r3
 8001d36:	4413      	add	r3, r2
 8001d38:	3360      	adds	r3, #96	; 0x60
 8001d3a:	2205      	movs	r2, #5
 8001d3c:	701a      	strb	r2, [r3, #0]
 8001d3e:	e063      	b.n	8001e08 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	212c      	movs	r1, #44	; 0x2c
 8001d46:	fb01 f303 	mul.w	r3, r1, r3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3361      	adds	r3, #97	; 0x61
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b06      	cmp	r3, #6
 8001d52:	d009      	beq.n	8001d68 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	212c      	movs	r1, #44	; 0x2c
 8001d5a:	fb01 f303 	mul.w	r3, r1, r3
 8001d5e:	4413      	add	r3, r2
 8001d60:	3361      	adds	r3, #97	; 0x61
 8001d62:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d14f      	bne.n	8001e08 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	212c      	movs	r1, #44	; 0x2c
 8001d6e:	fb01 f303 	mul.w	r3, r1, r3
 8001d72:	4413      	add	r3, r2
 8001d74:	335c      	adds	r3, #92	; 0x5c
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	1c5a      	adds	r2, r3, #1
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	202c      	movs	r0, #44	; 0x2c
 8001d80:	fb00 f303 	mul.w	r3, r0, r3
 8001d84:	440b      	add	r3, r1
 8001d86:	335c      	adds	r3, #92	; 0x5c
 8001d88:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	212c      	movs	r1, #44	; 0x2c
 8001d90:	fb01 f303 	mul.w	r3, r1, r3
 8001d94:	4413      	add	r3, r2
 8001d96:	335c      	adds	r3, #92	; 0x5c
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d912      	bls.n	8001dc4 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	212c      	movs	r1, #44	; 0x2c
 8001da4:	fb01 f303 	mul.w	r3, r1, r3
 8001da8:	4413      	add	r3, r2
 8001daa:	335c      	adds	r3, #92	; 0x5c
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	212c      	movs	r1, #44	; 0x2c
 8001db6:	fb01 f303 	mul.w	r3, r1, r3
 8001dba:	4413      	add	r3, r2
 8001dbc:	3360      	adds	r3, #96	; 0x60
 8001dbe:	2204      	movs	r2, #4
 8001dc0:	701a      	strb	r2, [r3, #0]
 8001dc2:	e021      	b.n	8001e08 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	212c      	movs	r1, #44	; 0x2c
 8001dca:	fb01 f303 	mul.w	r3, r1, r3
 8001dce:	4413      	add	r3, r2
 8001dd0:	3360      	adds	r3, #96	; 0x60
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	015a      	lsls	r2, r3, #5
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	4413      	add	r3, r2
 8001dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001dec:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001df4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	015a      	lsls	r2, r3, #5
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e02:	461a      	mov	r2, r3
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	015a      	lsls	r2, r3, #5
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	4413      	add	r3, r2
 8001e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e14:	461a      	mov	r2, r3
 8001e16:	2302      	movs	r3, #2
 8001e18:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	b2d9      	uxtb	r1, r3
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	202c      	movs	r0, #44	; 0x2c
 8001e24:	fb00 f303 	mul.w	r3, r0, r3
 8001e28:	4413      	add	r3, r2
 8001e2a:	3360      	adds	r3, #96	; 0x60
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f001 f8f3 	bl	800301c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001e36:	bf00      	nop
 8001e38:	3720      	adds	r7, #32
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b08a      	sub	sp, #40	; 0x28
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	0c5b      	lsrs	r3, r3, #17
 8001e64:	f003 030f 	and.w	r3, r3, #15
 8001e68:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	091b      	lsrs	r3, r3, #4
 8001e6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e72:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d004      	beq.n	8001e84 <HCD_RXQLVL_IRQHandler+0x46>
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	2b05      	cmp	r3, #5
 8001e7e:	f000 80a9 	beq.w	8001fd4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8001e82:	e0aa      	b.n	8001fda <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 80a6 	beq.w	8001fd8 <HCD_RXQLVL_IRQHandler+0x19a>
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	212c      	movs	r1, #44	; 0x2c
 8001e92:	fb01 f303 	mul.w	r3, r1, r3
 8001e96:	4413      	add	r3, r2
 8001e98:	3344      	adds	r3, #68	; 0x44
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 809b 	beq.w	8001fd8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	212c      	movs	r1, #44	; 0x2c
 8001ea8:	fb01 f303 	mul.w	r3, r1, r3
 8001eac:	4413      	add	r3, r2
 8001eae:	3350      	adds	r3, #80	; 0x50
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	441a      	add	r2, r3
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	202c      	movs	r0, #44	; 0x2c
 8001ebc:	fb00 f303 	mul.w	r3, r0, r3
 8001ec0:	440b      	add	r3, r1
 8001ec2:	334c      	adds	r3, #76	; 0x4c
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d87a      	bhi.n	8001fc0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	212c      	movs	r1, #44	; 0x2c
 8001ed4:	fb01 f303 	mul.w	r3, r1, r3
 8001ed8:	4413      	add	r3, r2
 8001eda:	3344      	adds	r3, #68	; 0x44
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	b292      	uxth	r2, r2
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	f000 fd9a 	bl	8002a1c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	212c      	movs	r1, #44	; 0x2c
 8001eee:	fb01 f303 	mul.w	r3, r1, r3
 8001ef2:	4413      	add	r3, r2
 8001ef4:	3344      	adds	r3, #68	; 0x44
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	441a      	add	r2, r3
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	202c      	movs	r0, #44	; 0x2c
 8001f02:	fb00 f303 	mul.w	r3, r0, r3
 8001f06:	440b      	add	r3, r1
 8001f08:	3344      	adds	r3, #68	; 0x44
 8001f0a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	212c      	movs	r1, #44	; 0x2c
 8001f12:	fb01 f303 	mul.w	r3, r1, r3
 8001f16:	4413      	add	r3, r2
 8001f18:	3350      	adds	r3, #80	; 0x50
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	441a      	add	r2, r3
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	202c      	movs	r0, #44	; 0x2c
 8001f26:	fb00 f303 	mul.w	r3, r0, r3
 8001f2a:	440b      	add	r3, r1
 8001f2c:	3350      	adds	r3, #80	; 0x50
 8001f2e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	015a      	lsls	r2, r3, #5
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	0cdb      	lsrs	r3, r3, #19
 8001f40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f44:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	212c      	movs	r1, #44	; 0x2c
 8001f4c:	fb01 f303 	mul.w	r3, r1, r3
 8001f50:	4413      	add	r3, r2
 8001f52:	3340      	adds	r3, #64	; 0x40
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d13c      	bne.n	8001fd8 <HCD_RXQLVL_IRQHandler+0x19a>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d039      	beq.n	8001fd8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	015a      	lsls	r2, r3, #5
 8001f68:	6a3b      	ldr	r3, [r7, #32]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001f7a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f82:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	015a      	lsls	r2, r3, #5
 8001f88:	6a3b      	ldr	r3, [r7, #32]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f90:	461a      	mov	r2, r3
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	212c      	movs	r1, #44	; 0x2c
 8001f9c:	fb01 f303 	mul.w	r3, r1, r3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3354      	adds	r3, #84	; 0x54
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	f083 0301 	eor.w	r3, r3, #1
 8001faa:	b2d8      	uxtb	r0, r3
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	212c      	movs	r1, #44	; 0x2c
 8001fb2:	fb01 f303 	mul.w	r3, r1, r3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3354      	adds	r3, #84	; 0x54
 8001fba:	4602      	mov	r2, r0
 8001fbc:	701a      	strb	r2, [r3, #0]
      break;
 8001fbe:	e00b      	b.n	8001fd8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	212c      	movs	r1, #44	; 0x2c
 8001fc6:	fb01 f303 	mul.w	r3, r1, r3
 8001fca:	4413      	add	r3, r2
 8001fcc:	3360      	adds	r3, #96	; 0x60
 8001fce:	2204      	movs	r2, #4
 8001fd0:	701a      	strb	r2, [r3, #0]
      break;
 8001fd2:	e001      	b.n	8001fd8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8001fd4:	bf00      	nop
 8001fd6:	e000      	b.n	8001fda <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8001fd8:	bf00      	nop
  }
}
 8001fda:	bf00      	nop
 8001fdc:	3728      	adds	r7, #40	; 0x28
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b086      	sub	sp, #24
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800200e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b02      	cmp	r3, #2
 8002018:	d10b      	bne.n	8002032 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b01      	cmp	r3, #1
 8002022:	d102      	bne.n	800202a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 ffdd 	bl	8002fe4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	f043 0302 	orr.w	r3, r3, #2
 8002030:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	2b08      	cmp	r3, #8
 800203a:	d132      	bne.n	80020a2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	f043 0308 	orr.w	r3, r3, #8
 8002042:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	2b04      	cmp	r3, #4
 800204c:	d126      	bne.n	800209c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	2b02      	cmp	r3, #2
 8002054:	d113      	bne.n	800207e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800205c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002060:	d106      	bne.n	8002070 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2102      	movs	r1, #2
 8002068:	4618      	mov	r0, r3
 800206a:	f000 fd21 	bl	8002ab0 <USB_InitFSLSPClkSel>
 800206e:	e011      	b.n	8002094 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2101      	movs	r1, #1
 8002076:	4618      	mov	r0, r3
 8002078:	f000 fd1a 	bl	8002ab0 <USB_InitFSLSPClkSel>
 800207c:	e00a      	b.n	8002094 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d106      	bne.n	8002094 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800208c:	461a      	mov	r2, r3
 800208e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002092:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 ffcf 	bl	8003038 <HAL_HCD_PortEnabled_Callback>
 800209a:	e002      	b.n	80020a2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 ffd9 	bl	8003054 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f003 0320 	and.w	r3, r3, #32
 80020a8:	2b20      	cmp	r3, #32
 80020aa:	d103      	bne.n	80020b4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	f043 0320 	orr.w	r3, r3, #32
 80020b2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80020ba:	461a      	mov	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	6013      	str	r3, [r2, #0]
}
 80020c0:	bf00      	nop
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e264      	b.n	80025a4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d075      	beq.n	80021d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020e6:	4ba3      	ldr	r3, [pc, #652]	; (8002374 <HAL_RCC_OscConfig+0x2ac>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 030c 	and.w	r3, r3, #12
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d00c      	beq.n	800210c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020f2:	4ba0      	ldr	r3, [pc, #640]	; (8002374 <HAL_RCC_OscConfig+0x2ac>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020fa:	2b08      	cmp	r3, #8
 80020fc:	d112      	bne.n	8002124 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020fe:	4b9d      	ldr	r3, [pc, #628]	; (8002374 <HAL_RCC_OscConfig+0x2ac>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002106:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800210a:	d10b      	bne.n	8002124 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800210c:	4b99      	ldr	r3, [pc, #612]	; (8002374 <HAL_RCC_OscConfig+0x2ac>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d05b      	beq.n	80021d0 <HAL_RCC_OscConfig+0x108>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d157      	bne.n	80021d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e23f      	b.n	80025a4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800212c:	d106      	bne.n	800213c <HAL_RCC_OscConfig+0x74>
 800212e:	4b91      	ldr	r3, [pc, #580]	; (8002374 <HAL_RCC_OscConfig+0x2ac>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a90      	ldr	r2, [pc, #576]	; (8002374 <HAL_RCC_OscConfig+0x2ac>)
 8002134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	e01d      	b.n	8002178 <HAL_RCC_OscConfig+0xb0>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002144:	d10c      	bne.n	8002160 <HAL_RCC_OscConfig+0x98>
 8002146:	4b8b      	ldr	r3, [pc, #556]	; (8002374 <HAL_RCC_OscConfig+0x2ac>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a8a      	ldr	r2, [pc, #552]	; (8002374 <HAL_RCC_OscConfig+0x2ac>)
 800214c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	4b88      	ldr	r3, [pc, #544]	; (8002374 <HAL_RCC_OscConfig+0x2ac>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a87      	ldr	r2, [pc, #540]	; (8002374 <HAL_RCC_OscConfig+0x2ac>)
 8002158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	e00b      	b.n	8002178 <HAL_RCC_OscConfig+0xb0>
 8002160:	4b84      	ldr	r3, [pc, #528]	; (8002374 <HAL_RCC_OscConfig+0x2ac>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a83      	ldr	r2, [pc, #524]	; (8002374 <HAL_RCC_OscConfig+0x2ac>)
 8002166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	4b81      	ldr	r3, [pc, #516]	; (8002374 <HAL_RCC_OscConfig+0x2ac>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a80      	ldr	r2, [pc, #512]	; (8002374 <HAL_RCC_OscConfig+0x2ac>)
 8002172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002176:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d013      	beq.n	80021a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002180:	f7fe fc2c 	bl	80009dc <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002188:	f7fe fc28 	bl	80009dc <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b64      	cmp	r3, #100	; 0x64
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e204      	b.n	80025a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219a:	4b76      	ldr	r3, [pc, #472]	; (8002374 <HAL_RCC_OscConfig+0x2ac>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCC_OscConfig+0xc0>
 80021a6:	e014      	b.n	80021d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a8:	f7fe fc18 	bl	80009dc <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021b0:	f7fe fc14 	bl	80009dc <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b64      	cmp	r3, #100	; 0x64
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e1f0      	b.n	80025a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021c2:	4b6c      	ldr	r3, [pc, #432]	; (8002374 <HAL_RCC_OscConfig+0x2ac>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0xe8>
 80021ce:	e000      	b.n	80021d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d063      	beq.n	80022a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021de:	4b65      	ldr	r3, [pc, #404]	; (8002374 <HAL_RCC_OscConfig+0x2ac>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 030c 	and.w	r3, r3, #12
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00b      	beq.n	8002202 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ea:	4b62      	ldr	r3, [pc, #392]	; (8002374 <HAL_RCC_OscConfig+0x2ac>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021f2:	2b08      	cmp	r3, #8
 80021f4:	d11c      	bne.n	8002230 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021f6:	4b5f      	ldr	r3, [pc, #380]	; (8002374 <HAL_RCC_OscConfig+0x2ac>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d116      	bne.n	8002230 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002202:	4b5c      	ldr	r3, [pc, #368]	; (8002374 <HAL_RCC_OscConfig+0x2ac>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d005      	beq.n	800221a <HAL_RCC_OscConfig+0x152>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d001      	beq.n	800221a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e1c4      	b.n	80025a4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221a:	4b56      	ldr	r3, [pc, #344]	; (8002374 <HAL_RCC_OscConfig+0x2ac>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	4952      	ldr	r1, [pc, #328]	; (8002374 <HAL_RCC_OscConfig+0x2ac>)
 800222a:	4313      	orrs	r3, r2
 800222c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222e:	e03a      	b.n	80022a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d020      	beq.n	800227a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002238:	4b4f      	ldr	r3, [pc, #316]	; (8002378 <HAL_RCC_OscConfig+0x2b0>)
 800223a:	2201      	movs	r2, #1
 800223c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223e:	f7fe fbcd 	bl	80009dc <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002246:	f7fe fbc9 	bl	80009dc <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e1a5      	b.n	80025a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002258:	4b46      	ldr	r3, [pc, #280]	; (8002374 <HAL_RCC_OscConfig+0x2ac>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f0      	beq.n	8002246 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002264:	4b43      	ldr	r3, [pc, #268]	; (8002374 <HAL_RCC_OscConfig+0x2ac>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	4940      	ldr	r1, [pc, #256]	; (8002374 <HAL_RCC_OscConfig+0x2ac>)
 8002274:	4313      	orrs	r3, r2
 8002276:	600b      	str	r3, [r1, #0]
 8002278:	e015      	b.n	80022a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800227a:	4b3f      	ldr	r3, [pc, #252]	; (8002378 <HAL_RCC_OscConfig+0x2b0>)
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002280:	f7fe fbac 	bl	80009dc <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002288:	f7fe fba8 	bl	80009dc <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e184      	b.n	80025a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229a:	4b36      	ldr	r3, [pc, #216]	; (8002374 <HAL_RCC_OscConfig+0x2ac>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d030      	beq.n	8002314 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d016      	beq.n	80022e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ba:	4b30      	ldr	r3, [pc, #192]	; (800237c <HAL_RCC_OscConfig+0x2b4>)
 80022bc:	2201      	movs	r2, #1
 80022be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c0:	f7fe fb8c 	bl	80009dc <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022c8:	f7fe fb88 	bl	80009dc <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e164      	b.n	80025a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022da:	4b26      	ldr	r3, [pc, #152]	; (8002374 <HAL_RCC_OscConfig+0x2ac>)
 80022dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCC_OscConfig+0x200>
 80022e6:	e015      	b.n	8002314 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022e8:	4b24      	ldr	r3, [pc, #144]	; (800237c <HAL_RCC_OscConfig+0x2b4>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ee:	f7fe fb75 	bl	80009dc <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022f6:	f7fe fb71 	bl	80009dc <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e14d      	b.n	80025a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002308:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <HAL_RCC_OscConfig+0x2ac>)
 800230a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1f0      	bne.n	80022f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80a0 	beq.w	8002462 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002322:	2300      	movs	r3, #0
 8002324:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002326:	4b13      	ldr	r3, [pc, #76]	; (8002374 <HAL_RCC_OscConfig+0x2ac>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10f      	bne.n	8002352 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	60bb      	str	r3, [r7, #8]
 8002336:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <HAL_RCC_OscConfig+0x2ac>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	4a0e      	ldr	r2, [pc, #56]	; (8002374 <HAL_RCC_OscConfig+0x2ac>)
 800233c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002340:	6413      	str	r3, [r2, #64]	; 0x40
 8002342:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <HAL_RCC_OscConfig+0x2ac>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800234e:	2301      	movs	r3, #1
 8002350:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002352:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <HAL_RCC_OscConfig+0x2b8>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235a:	2b00      	cmp	r3, #0
 800235c:	d121      	bne.n	80023a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800235e:	4b08      	ldr	r3, [pc, #32]	; (8002380 <HAL_RCC_OscConfig+0x2b8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a07      	ldr	r2, [pc, #28]	; (8002380 <HAL_RCC_OscConfig+0x2b8>)
 8002364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002368:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800236a:	f7fe fb37 	bl	80009dc <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002370:	e011      	b.n	8002396 <HAL_RCC_OscConfig+0x2ce>
 8002372:	bf00      	nop
 8002374:	40023800 	.word	0x40023800
 8002378:	42470000 	.word	0x42470000
 800237c:	42470e80 	.word	0x42470e80
 8002380:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002384:	f7fe fb2a 	bl	80009dc <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e106      	b.n	80025a4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002396:	4b85      	ldr	r3, [pc, #532]	; (80025ac <HAL_RCC_OscConfig+0x4e4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d106      	bne.n	80023b8 <HAL_RCC_OscConfig+0x2f0>
 80023aa:	4b81      	ldr	r3, [pc, #516]	; (80025b0 <HAL_RCC_OscConfig+0x4e8>)
 80023ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ae:	4a80      	ldr	r2, [pc, #512]	; (80025b0 <HAL_RCC_OscConfig+0x4e8>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	6713      	str	r3, [r2, #112]	; 0x70
 80023b6:	e01c      	b.n	80023f2 <HAL_RCC_OscConfig+0x32a>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	2b05      	cmp	r3, #5
 80023be:	d10c      	bne.n	80023da <HAL_RCC_OscConfig+0x312>
 80023c0:	4b7b      	ldr	r3, [pc, #492]	; (80025b0 <HAL_RCC_OscConfig+0x4e8>)
 80023c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c4:	4a7a      	ldr	r2, [pc, #488]	; (80025b0 <HAL_RCC_OscConfig+0x4e8>)
 80023c6:	f043 0304 	orr.w	r3, r3, #4
 80023ca:	6713      	str	r3, [r2, #112]	; 0x70
 80023cc:	4b78      	ldr	r3, [pc, #480]	; (80025b0 <HAL_RCC_OscConfig+0x4e8>)
 80023ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d0:	4a77      	ldr	r2, [pc, #476]	; (80025b0 <HAL_RCC_OscConfig+0x4e8>)
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	6713      	str	r3, [r2, #112]	; 0x70
 80023d8:	e00b      	b.n	80023f2 <HAL_RCC_OscConfig+0x32a>
 80023da:	4b75      	ldr	r3, [pc, #468]	; (80025b0 <HAL_RCC_OscConfig+0x4e8>)
 80023dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023de:	4a74      	ldr	r2, [pc, #464]	; (80025b0 <HAL_RCC_OscConfig+0x4e8>)
 80023e0:	f023 0301 	bic.w	r3, r3, #1
 80023e4:	6713      	str	r3, [r2, #112]	; 0x70
 80023e6:	4b72      	ldr	r3, [pc, #456]	; (80025b0 <HAL_RCC_OscConfig+0x4e8>)
 80023e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ea:	4a71      	ldr	r2, [pc, #452]	; (80025b0 <HAL_RCC_OscConfig+0x4e8>)
 80023ec:	f023 0304 	bic.w	r3, r3, #4
 80023f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d015      	beq.n	8002426 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fa:	f7fe faef 	bl	80009dc <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002400:	e00a      	b.n	8002418 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002402:	f7fe faeb 	bl	80009dc <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002410:	4293      	cmp	r3, r2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e0c5      	b.n	80025a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002418:	4b65      	ldr	r3, [pc, #404]	; (80025b0 <HAL_RCC_OscConfig+0x4e8>)
 800241a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d0ee      	beq.n	8002402 <HAL_RCC_OscConfig+0x33a>
 8002424:	e014      	b.n	8002450 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002426:	f7fe fad9 	bl	80009dc <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800242c:	e00a      	b.n	8002444 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800242e:	f7fe fad5 	bl	80009dc <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	f241 3288 	movw	r2, #5000	; 0x1388
 800243c:	4293      	cmp	r3, r2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e0af      	b.n	80025a4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002444:	4b5a      	ldr	r3, [pc, #360]	; (80025b0 <HAL_RCC_OscConfig+0x4e8>)
 8002446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1ee      	bne.n	800242e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002450:	7dfb      	ldrb	r3, [r7, #23]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d105      	bne.n	8002462 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002456:	4b56      	ldr	r3, [pc, #344]	; (80025b0 <HAL_RCC_OscConfig+0x4e8>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	4a55      	ldr	r2, [pc, #340]	; (80025b0 <HAL_RCC_OscConfig+0x4e8>)
 800245c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002460:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	2b00      	cmp	r3, #0
 8002468:	f000 809b 	beq.w	80025a2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800246c:	4b50      	ldr	r3, [pc, #320]	; (80025b0 <HAL_RCC_OscConfig+0x4e8>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 030c 	and.w	r3, r3, #12
 8002474:	2b08      	cmp	r3, #8
 8002476:	d05c      	beq.n	8002532 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	2b02      	cmp	r3, #2
 800247e:	d141      	bne.n	8002504 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002480:	4b4c      	ldr	r3, [pc, #304]	; (80025b4 <HAL_RCC_OscConfig+0x4ec>)
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002486:	f7fe faa9 	bl	80009dc <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800248e:	f7fe faa5 	bl	80009dc <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e081      	b.n	80025a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a0:	4b43      	ldr	r3, [pc, #268]	; (80025b0 <HAL_RCC_OscConfig+0x4e8>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1f0      	bne.n	800248e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69da      	ldr	r2, [r3, #28]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	431a      	orrs	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	019b      	lsls	r3, r3, #6
 80024bc:	431a      	orrs	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c2:	085b      	lsrs	r3, r3, #1
 80024c4:	3b01      	subs	r3, #1
 80024c6:	041b      	lsls	r3, r3, #16
 80024c8:	431a      	orrs	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ce:	061b      	lsls	r3, r3, #24
 80024d0:	4937      	ldr	r1, [pc, #220]	; (80025b0 <HAL_RCC_OscConfig+0x4e8>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024d6:	4b37      	ldr	r3, [pc, #220]	; (80025b4 <HAL_RCC_OscConfig+0x4ec>)
 80024d8:	2201      	movs	r2, #1
 80024da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024dc:	f7fe fa7e 	bl	80009dc <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e4:	f7fe fa7a 	bl	80009dc <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e056      	b.n	80025a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f6:	4b2e      	ldr	r3, [pc, #184]	; (80025b0 <HAL_RCC_OscConfig+0x4e8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0x41c>
 8002502:	e04e      	b.n	80025a2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002504:	4b2b      	ldr	r3, [pc, #172]	; (80025b4 <HAL_RCC_OscConfig+0x4ec>)
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250a:	f7fe fa67 	bl	80009dc <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002512:	f7fe fa63 	bl	80009dc <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e03f      	b.n	80025a4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002524:	4b22      	ldr	r3, [pc, #136]	; (80025b0 <HAL_RCC_OscConfig+0x4e8>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f0      	bne.n	8002512 <HAL_RCC_OscConfig+0x44a>
 8002530:	e037      	b.n	80025a2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e032      	b.n	80025a4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800253e:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <HAL_RCC_OscConfig+0x4e8>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d028      	beq.n	800259e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002556:	429a      	cmp	r2, r3
 8002558:	d121      	bne.n	800259e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002564:	429a      	cmp	r2, r3
 8002566:	d11a      	bne.n	800259e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800256e:	4013      	ands	r3, r2
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002574:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002576:	4293      	cmp	r3, r2
 8002578:	d111      	bne.n	800259e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	3b01      	subs	r3, #1
 8002588:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800258a:	429a      	cmp	r2, r3
 800258c:	d107      	bne.n	800259e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800259a:	429a      	cmp	r2, r3
 800259c:	d001      	beq.n	80025a2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40007000 	.word	0x40007000
 80025b0:	40023800 	.word	0x40023800
 80025b4:	42470060 	.word	0x42470060

080025b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0cc      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025cc:	4b68      	ldr	r3, [pc, #416]	; (8002770 <HAL_RCC_ClockConfig+0x1b8>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d90c      	bls.n	80025f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025da:	4b65      	ldr	r3, [pc, #404]	; (8002770 <HAL_RCC_ClockConfig+0x1b8>)
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e2:	4b63      	ldr	r3, [pc, #396]	; (8002770 <HAL_RCC_ClockConfig+0x1b8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d001      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e0b8      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d020      	beq.n	8002642 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800260c:	4b59      	ldr	r3, [pc, #356]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	4a58      	ldr	r2, [pc, #352]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002616:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0308 	and.w	r3, r3, #8
 8002620:	2b00      	cmp	r3, #0
 8002622:	d005      	beq.n	8002630 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002624:	4b53      	ldr	r3, [pc, #332]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	4a52      	ldr	r2, [pc, #328]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800262e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002630:	4b50      	ldr	r3, [pc, #320]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	494d      	ldr	r1, [pc, #308]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	4313      	orrs	r3, r2
 8002640:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d044      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d107      	bne.n	8002666 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002656:	4b47      	ldr	r3, [pc, #284]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d119      	bne.n	8002696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e07f      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d003      	beq.n	8002676 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002672:	2b03      	cmp	r3, #3
 8002674:	d107      	bne.n	8002686 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002676:	4b3f      	ldr	r3, [pc, #252]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d109      	bne.n	8002696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e06f      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002686:	4b3b      	ldr	r3, [pc, #236]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e067      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002696:	4b37      	ldr	r3, [pc, #220]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f023 0203 	bic.w	r2, r3, #3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	4934      	ldr	r1, [pc, #208]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026a8:	f7fe f998 	bl	80009dc <HAL_GetTick>
 80026ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ae:	e00a      	b.n	80026c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b0:	f7fe f994 	bl	80009dc <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80026be:	4293      	cmp	r3, r2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e04f      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c6:	4b2b      	ldr	r3, [pc, #172]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 020c 	and.w	r2, r3, #12
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d1eb      	bne.n	80026b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026d8:	4b25      	ldr	r3, [pc, #148]	; (8002770 <HAL_RCC_ClockConfig+0x1b8>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d20c      	bcs.n	8002700 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e6:	4b22      	ldr	r3, [pc, #136]	; (8002770 <HAL_RCC_ClockConfig+0x1b8>)
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ee:	4b20      	ldr	r3, [pc, #128]	; (8002770 <HAL_RCC_ClockConfig+0x1b8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d001      	beq.n	8002700 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e032      	b.n	8002766 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	d008      	beq.n	800271e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800270c:	4b19      	ldr	r3, [pc, #100]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4916      	ldr	r1, [pc, #88]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 800271a:	4313      	orrs	r3, r2
 800271c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	2b00      	cmp	r3, #0
 8002728:	d009      	beq.n	800273e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800272a:	4b12      	ldr	r3, [pc, #72]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	490e      	ldr	r1, [pc, #56]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 800273a:	4313      	orrs	r3, r2
 800273c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800273e:	f000 f821 	bl	8002784 <HAL_RCC_GetSysClockFreq>
 8002742:	4602      	mov	r2, r0
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	091b      	lsrs	r3, r3, #4
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	490a      	ldr	r1, [pc, #40]	; (8002778 <HAL_RCC_ClockConfig+0x1c0>)
 8002750:	5ccb      	ldrb	r3, [r1, r3]
 8002752:	fa22 f303 	lsr.w	r3, r2, r3
 8002756:	4a09      	ldr	r2, [pc, #36]	; (800277c <HAL_RCC_ClockConfig+0x1c4>)
 8002758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800275a:	4b09      	ldr	r3, [pc, #36]	; (8002780 <HAL_RCC_ClockConfig+0x1c8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f7fe f8f8 	bl	8000954 <HAL_InitTick>

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40023c00 	.word	0x40023c00
 8002774:	40023800 	.word	0x40023800
 8002778:	08003170 	.word	0x08003170
 800277c:	20000000 	.word	0x20000000
 8002780:	20000004 	.word	0x20000004

08002784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002784:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002788:	b084      	sub	sp, #16
 800278a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800278c:	2300      	movs	r3, #0
 800278e:	607b      	str	r3, [r7, #4]
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	2300      	movs	r3, #0
 8002796:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800279c:	4b67      	ldr	r3, [pc, #412]	; (800293c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 030c 	and.w	r3, r3, #12
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	d00d      	beq.n	80027c4 <HAL_RCC_GetSysClockFreq+0x40>
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	f200 80bd 	bhi.w	8002928 <HAL_RCC_GetSysClockFreq+0x1a4>
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <HAL_RCC_GetSysClockFreq+0x34>
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d003      	beq.n	80027be <HAL_RCC_GetSysClockFreq+0x3a>
 80027b6:	e0b7      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027b8:	4b61      	ldr	r3, [pc, #388]	; (8002940 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80027ba:	60bb      	str	r3, [r7, #8]
       break;
 80027bc:	e0b7      	b.n	800292e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027be:	4b61      	ldr	r3, [pc, #388]	; (8002944 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80027c0:	60bb      	str	r3, [r7, #8]
      break;
 80027c2:	e0b4      	b.n	800292e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027c4:	4b5d      	ldr	r3, [pc, #372]	; (800293c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027ce:	4b5b      	ldr	r3, [pc, #364]	; (800293c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d04d      	beq.n	8002876 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027da:	4b58      	ldr	r3, [pc, #352]	; (800293c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	099b      	lsrs	r3, r3, #6
 80027e0:	461a      	mov	r2, r3
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80027ea:	f04f 0100 	mov.w	r1, #0
 80027ee:	ea02 0800 	and.w	r8, r2, r0
 80027f2:	ea03 0901 	and.w	r9, r3, r1
 80027f6:	4640      	mov	r0, r8
 80027f8:	4649      	mov	r1, r9
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	f04f 0300 	mov.w	r3, #0
 8002802:	014b      	lsls	r3, r1, #5
 8002804:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002808:	0142      	lsls	r2, r0, #5
 800280a:	4610      	mov	r0, r2
 800280c:	4619      	mov	r1, r3
 800280e:	ebb0 0008 	subs.w	r0, r0, r8
 8002812:	eb61 0109 	sbc.w	r1, r1, r9
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	018b      	lsls	r3, r1, #6
 8002820:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002824:	0182      	lsls	r2, r0, #6
 8002826:	1a12      	subs	r2, r2, r0
 8002828:	eb63 0301 	sbc.w	r3, r3, r1
 800282c:	f04f 0000 	mov.w	r0, #0
 8002830:	f04f 0100 	mov.w	r1, #0
 8002834:	00d9      	lsls	r1, r3, #3
 8002836:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800283a:	00d0      	lsls	r0, r2, #3
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	eb12 0208 	adds.w	r2, r2, r8
 8002844:	eb43 0309 	adc.w	r3, r3, r9
 8002848:	f04f 0000 	mov.w	r0, #0
 800284c:	f04f 0100 	mov.w	r1, #0
 8002850:	0259      	lsls	r1, r3, #9
 8002852:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002856:	0250      	lsls	r0, r2, #9
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4610      	mov	r0, r2
 800285e:	4619      	mov	r1, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	461a      	mov	r2, r3
 8002864:	f04f 0300 	mov.w	r3, #0
 8002868:	f7fd fcae 	bl	80001c8 <__aeabi_uldivmod>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4613      	mov	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	e04a      	b.n	800290c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002876:	4b31      	ldr	r3, [pc, #196]	; (800293c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	099b      	lsrs	r3, r3, #6
 800287c:	461a      	mov	r2, r3
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002886:	f04f 0100 	mov.w	r1, #0
 800288a:	ea02 0400 	and.w	r4, r2, r0
 800288e:	ea03 0501 	and.w	r5, r3, r1
 8002892:	4620      	mov	r0, r4
 8002894:	4629      	mov	r1, r5
 8002896:	f04f 0200 	mov.w	r2, #0
 800289a:	f04f 0300 	mov.w	r3, #0
 800289e:	014b      	lsls	r3, r1, #5
 80028a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028a4:	0142      	lsls	r2, r0, #5
 80028a6:	4610      	mov	r0, r2
 80028a8:	4619      	mov	r1, r3
 80028aa:	1b00      	subs	r0, r0, r4
 80028ac:	eb61 0105 	sbc.w	r1, r1, r5
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	f04f 0300 	mov.w	r3, #0
 80028b8:	018b      	lsls	r3, r1, #6
 80028ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80028be:	0182      	lsls	r2, r0, #6
 80028c0:	1a12      	subs	r2, r2, r0
 80028c2:	eb63 0301 	sbc.w	r3, r3, r1
 80028c6:	f04f 0000 	mov.w	r0, #0
 80028ca:	f04f 0100 	mov.w	r1, #0
 80028ce:	00d9      	lsls	r1, r3, #3
 80028d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028d4:	00d0      	lsls	r0, r2, #3
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	1912      	adds	r2, r2, r4
 80028dc:	eb45 0303 	adc.w	r3, r5, r3
 80028e0:	f04f 0000 	mov.w	r0, #0
 80028e4:	f04f 0100 	mov.w	r1, #0
 80028e8:	0299      	lsls	r1, r3, #10
 80028ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80028ee:	0290      	lsls	r0, r2, #10
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4610      	mov	r0, r2
 80028f6:	4619      	mov	r1, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	461a      	mov	r2, r3
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	f7fd fc62 	bl	80001c8 <__aeabi_uldivmod>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4613      	mov	r3, r2
 800290a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	0c1b      	lsrs	r3, r3, #16
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	3301      	adds	r3, #1
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	fbb2 f3f3 	udiv	r3, r2, r3
 8002924:	60bb      	str	r3, [r7, #8]
      break;
 8002926:	e002      	b.n	800292e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002928:	4b05      	ldr	r3, [pc, #20]	; (8002940 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800292a:	60bb      	str	r3, [r7, #8]
      break;
 800292c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800292e:	68bb      	ldr	r3, [r7, #8]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800293a:	bf00      	nop
 800293c:	40023800 	.word	0x40023800
 8002940:	00f42400 	.word	0x00f42400
 8002944:	007a1200 	.word	0x007a1200

08002948 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f043 0201 	orr.w	r2, r3, #1
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f023 0201 	bic.w	r2, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	019b      	lsls	r3, r3, #6
 800299e:	f043 0220 	orr.w	r2, r3, #32
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	3301      	adds	r3, #1
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4a09      	ldr	r2, [pc, #36]	; (80029d4 <USB_FlushTxFifo+0x48>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d901      	bls.n	80029b8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e006      	b.n	80029c6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	f003 0320 	and.w	r3, r3, #32
 80029c0:	2b20      	cmp	r3, #32
 80029c2:	d0f0      	beq.n	80029a6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	00030d40 	.word	0x00030d40

080029d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2210      	movs	r2, #16
 80029e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	3301      	adds	r3, #1
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4a09      	ldr	r2, [pc, #36]	; (8002a18 <USB_FlushRxFifo+0x40>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d901      	bls.n	80029fc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e006      	b.n	8002a0a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	f003 0310 	and.w	r3, r3, #16
 8002a04:	2b10      	cmp	r3, #16
 8002a06:	d0f0      	beq.n	80029ea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	00030d40 	.word	0x00030d40

08002a1c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b089      	sub	sp, #36	; 0x24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	4613      	mov	r3, r2
 8002a28:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8002a32:	88fb      	ldrh	r3, [r7, #6]
 8002a34:	3303      	adds	r3, #3
 8002a36:	089b      	lsrs	r3, r3, #2
 8002a38:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61bb      	str	r3, [r7, #24]
 8002a3e:	e00b      	b.n	8002a58 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	601a      	str	r2, [r3, #0]
    pDest++;
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	3304      	adds	r3, #4
 8002a50:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	3301      	adds	r3, #1
 8002a56:	61bb      	str	r3, [r7, #24]
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d3ef      	bcc.n	8002a40 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8002a60:	69fb      	ldr	r3, [r7, #28]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3724      	adds	r7, #36	; 0x24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b085      	sub	sp, #20
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	4013      	ands	r3, r2
 8002a84:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8002a86:	68fb      	ldr	r3, [r7, #12]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ace:	f023 0303 	bic.w	r3, r3, #3
 8002ad2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	78fb      	ldrb	r3, [r7, #3]
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	68f9      	ldr	r1, [r7, #12]
 8002ae4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8002aec:	78fb      	ldrb	r3, [r7, #3]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d107      	bne.n	8002b02 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002af8:	461a      	mov	r2, r3
 8002afa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8002afe:	6053      	str	r3, [r2, #4]
 8002b00:	e009      	b.n	8002b16 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8002b02:	78fb      	ldrb	r3, [r7, #3]
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d106      	bne.n	8002b16 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b0e:	461a      	mov	r2, r3
 8002b10:	f241 7370 	movw	r3, #6000	; 0x1770
 8002b14:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	b29b      	uxth	r3, r3
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b089      	sub	sp, #36	; 0x24
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	460b      	mov	r3, r1
 8002b50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8002b56:	78fb      	ldrb	r3, [r7, #3]
 8002b58:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	015a      	lsls	r2, r3, #5
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	4413      	add	r3, r2
 8002b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	0c9b      	lsrs	r3, r3, #18
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	015a      	lsls	r2, r3, #5
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	0fdb      	lsrs	r3, r3, #31
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 0320 	and.w	r3, r3, #32
 8002b92:	2b20      	cmp	r3, #32
 8002b94:	d104      	bne.n	8002ba0 <USB_HC_Halt+0x5a>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	e0e8      	b.n	8002d72 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d002      	beq.n	8002bac <USB_HC_Halt+0x66>
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d173      	bne.n	8002c94 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	015a      	lsls	r2, r3, #5
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	0151      	lsls	r1, r2, #5
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	440a      	add	r2, r1
 8002bc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bc6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002bca:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 0320 	and.w	r3, r3, #32
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f040 80cb 	bne.w	8002d70 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d143      	bne.n	8002c6e <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	015a      	lsls	r2, r3, #5
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	0151      	lsls	r1, r2, #5
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	440a      	add	r2, r1
 8002bfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c04:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	015a      	lsls	r2, r3, #5
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	0151      	lsls	r1, r2, #5
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	440a      	add	r2, r1
 8002c1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c24:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	015a      	lsls	r2, r3, #5
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	0151      	lsls	r1, r2, #5
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	440a      	add	r2, r1
 8002c3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002c44:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	61fb      	str	r3, [r7, #28]
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c52:	d81d      	bhi.n	8002c90 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	015a      	lsls	r2, r3, #5
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c6a:	d0ec      	beq.n	8002c46 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002c6c:	e080      	b.n	8002d70 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	015a      	lsls	r2, r3, #5
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	4413      	add	r3, r2
 8002c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	0151      	lsls	r1, r2, #5
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	440a      	add	r2, r1
 8002c84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c8c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002c8e:	e06f      	b.n	8002d70 <USB_HC_Halt+0x22a>
            break;
 8002c90:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002c92:	e06d      	b.n	8002d70 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	0151      	lsls	r1, r2, #5
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	440a      	add	r2, r1
 8002caa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002cb2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d143      	bne.n	8002d4c <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	015a      	lsls	r2, r3, #5
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	0151      	lsls	r1, r2, #5
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	440a      	add	r2, r1
 8002cda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ce2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	015a      	lsls	r2, r3, #5
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	4413      	add	r3, r2
 8002cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	0151      	lsls	r1, r2, #5
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	440a      	add	r2, r1
 8002cfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d02:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	015a      	lsls	r2, r3, #5
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	0151      	lsls	r1, r2, #5
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	440a      	add	r2, r1
 8002d1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002d22:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	3301      	adds	r3, #1
 8002d28:	61fb      	str	r3, [r7, #28]
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d30:	d81d      	bhi.n	8002d6e <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	015a      	lsls	r2, r3, #5
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	4413      	add	r3, r2
 8002d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d48:	d0ec      	beq.n	8002d24 <USB_HC_Halt+0x1de>
 8002d4a:	e011      	b.n	8002d70 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	0151      	lsls	r1, r2, #5
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	440a      	add	r2, r1
 8002d62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d6a:	6013      	str	r3, [r2, #0]
 8002d6c:	e000      	b.n	8002d70 <USB_HC_Halt+0x22a>
          break;
 8002d6e:	bf00      	nop
    }
  }

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3724      	adds	r7, #36	; 0x24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b086      	sub	sp, #24
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7ff fdeb 	bl	800296a <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8002d94:	2110      	movs	r1, #16
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7ff fdf8 	bl	800298c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f7ff fe1b 	bl	80029d8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8002da2:	2300      	movs	r3, #0
 8002da4:	613b      	str	r3, [r7, #16]
 8002da6:	e01f      	b.n	8002de8 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	015a      	lsls	r2, r3, #5
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002dbe:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dc6:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002dce:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	015a      	lsls	r2, r3, #5
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ddc:	461a      	mov	r2, r3
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	3301      	adds	r3, #1
 8002de6:	613b      	str	r3, [r7, #16]
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	2b0f      	cmp	r3, #15
 8002dec:	d9dc      	bls.n	8002da8 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8002dee:	2300      	movs	r3, #0
 8002df0:	613b      	str	r3, [r7, #16]
 8002df2:	e034      	b.n	8002e5e <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	015a      	lsls	r2, r3, #5
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e0a:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e12:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002e1a:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	015a      	lsls	r2, r3, #5
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4413      	add	r3, r2
 8002e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e28:	461a      	mov	r2, r3
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	3301      	adds	r3, #1
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e3a:	d80c      	bhi.n	8002e56 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	015a      	lsls	r2, r3, #5
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e52:	d0ec      	beq.n	8002e2e <USB_StopHost+0xb0>
 8002e54:	e000      	b.n	8002e58 <USB_StopHost+0xda>
        break;
 8002e56:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	613b      	str	r3, [r7, #16]
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	2b0f      	cmp	r3, #15
 8002e62:	d9c7      	bls.n	8002df4 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e70:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f04f 32ff 	mov.w	r2, #4294967295
 8002e78:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7ff fd64 	bl	8002948 <USB_EnableGlobalInt>

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8002e98:	1c5a      	adds	r2, r3, #1
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f804 	bl	8002eae <USBH_HandleSof>
}
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b0b      	cmp	r3, #11
 8002ebe:	d10a      	bne.n	8002ed6 <USBH_HandleSof+0x28>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d005      	beq.n	8002ed6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	4798      	blx	r3
  }
}
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8002eee:	bf00      	nop
}
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8002f0a:	bf00      	nop
}
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f883 	bl	8003070 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	791b      	ldrb	r3, [r3, #4]
 8002f6e:	4619      	mov	r1, r3
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f80b 	bl	8002f8c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	795b      	ldrb	r3, [r3, #5]
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f805 	bl	8002f8c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	2b0a      	cmp	r3, #10
 8002f9c:	d80d      	bhi.n	8002fba <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8002f9e:	78fb      	ldrb	r3, [r7, #3]
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	33e0      	adds	r3, #224	; 0xe0
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	78fb      	ldrb	r3, [r7, #3]
 8002fac:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	33e0      	adds	r3, #224	; 0xe0
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff ff57 	bl	8002e8a <USBH_LL_IncTimer>
}
 8002fdc:	bf00      	nop
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff ff8f 	bl	8002f16 <USBH_LL_Connect>
}
 8002ff8:	bf00      	nop
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff ff98 	bl	8002f44 <USBH_LL_Disconnect>
}
 8003014:	bf00      	nop
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	70fb      	strb	r3, [r7, #3]
 8003028:	4613      	mov	r3, r2
 800302a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff ff49 	bl	8002ede <USBH_LL_PortEnabled>
}
 800304c:	bf00      	nop
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff ff49 	bl	8002efa <USBH_LL_PortDisabled>
}
 8003068:	bf00      	nop
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8003078:	2300      	movs	r3, #0
 800307a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8003086:	4618      	mov	r0, r3
 8003088:	f7fd fe9d 	bl	8000dc6 <HAL_HCD_Stop>
 800308c:	4603      	mov	r3, r0
 800308e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	4618      	mov	r0, r3
 8003094:	f000 f808 	bl	80030a8 <USBH_Get_USB_Status>
 8003098:	4603      	mov	r3, r0
 800309a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800309c:	7bbb      	ldrb	r3, [r7, #14]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	4603      	mov	r3, r0
 80030b0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80030b6:	79fb      	ldrb	r3, [r7, #7]
 80030b8:	2b03      	cmp	r3, #3
 80030ba:	d817      	bhi.n	80030ec <USBH_Get_USB_Status+0x44>
 80030bc:	a201      	add	r2, pc, #4	; (adr r2, 80030c4 <USBH_Get_USB_Status+0x1c>)
 80030be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c2:	bf00      	nop
 80030c4:	080030d5 	.word	0x080030d5
 80030c8:	080030db 	.word	0x080030db
 80030cc:	080030e1 	.word	0x080030e1
 80030d0:	080030e7 	.word	0x080030e7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80030d4:	2300      	movs	r3, #0
 80030d6:	73fb      	strb	r3, [r7, #15]
    break;
 80030d8:	e00b      	b.n	80030f2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80030da:	2302      	movs	r3, #2
 80030dc:	73fb      	strb	r3, [r7, #15]
    break;
 80030de:	e008      	b.n	80030f2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80030e0:	2301      	movs	r3, #1
 80030e2:	73fb      	strb	r3, [r7, #15]
    break;
 80030e4:	e005      	b.n	80030f2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80030e6:	2302      	movs	r3, #2
 80030e8:	73fb      	strb	r3, [r7, #15]
    break;
 80030ea:	e002      	b.n	80030f2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80030ec:	2302      	movs	r3, #2
 80030ee:	73fb      	strb	r3, [r7, #15]
    break;
 80030f0:	bf00      	nop
  }
  return usb_status;
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <__libc_init_array>:
 8003100:	b570      	push	{r4, r5, r6, lr}
 8003102:	4d0d      	ldr	r5, [pc, #52]	; (8003138 <__libc_init_array+0x38>)
 8003104:	4c0d      	ldr	r4, [pc, #52]	; (800313c <__libc_init_array+0x3c>)
 8003106:	1b64      	subs	r4, r4, r5
 8003108:	10a4      	asrs	r4, r4, #2
 800310a:	2600      	movs	r6, #0
 800310c:	42a6      	cmp	r6, r4
 800310e:	d109      	bne.n	8003124 <__libc_init_array+0x24>
 8003110:	4d0b      	ldr	r5, [pc, #44]	; (8003140 <__libc_init_array+0x40>)
 8003112:	4c0c      	ldr	r4, [pc, #48]	; (8003144 <__libc_init_array+0x44>)
 8003114:	f000 f820 	bl	8003158 <_init>
 8003118:	1b64      	subs	r4, r4, r5
 800311a:	10a4      	asrs	r4, r4, #2
 800311c:	2600      	movs	r6, #0
 800311e:	42a6      	cmp	r6, r4
 8003120:	d105      	bne.n	800312e <__libc_init_array+0x2e>
 8003122:	bd70      	pop	{r4, r5, r6, pc}
 8003124:	f855 3b04 	ldr.w	r3, [r5], #4
 8003128:	4798      	blx	r3
 800312a:	3601      	adds	r6, #1
 800312c:	e7ee      	b.n	800310c <__libc_init_array+0xc>
 800312e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003132:	4798      	blx	r3
 8003134:	3601      	adds	r6, #1
 8003136:	e7f2      	b.n	800311e <__libc_init_array+0x1e>
 8003138:	08003188 	.word	0x08003188
 800313c:	08003188 	.word	0x08003188
 8003140:	08003188 	.word	0x08003188
 8003144:	0800318c 	.word	0x0800318c

08003148 <memset>:
 8003148:	4402      	add	r2, r0
 800314a:	4603      	mov	r3, r0
 800314c:	4293      	cmp	r3, r2
 800314e:	d100      	bne.n	8003152 <memset+0xa>
 8003150:	4770      	bx	lr
 8003152:	f803 1b01 	strb.w	r1, [r3], #1
 8003156:	e7f9      	b.n	800314c <memset+0x4>

08003158 <_init>:
 8003158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800315a:	bf00      	nop
 800315c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800315e:	bc08      	pop	{r3}
 8003160:	469e      	mov	lr, r3
 8003162:	4770      	bx	lr

08003164 <_fini>:
 8003164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003166:	bf00      	nop
 8003168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800316a:	bc08      	pop	{r3}
 800316c:	469e      	mov	lr, r3
 800316e:	4770      	bx	lr
